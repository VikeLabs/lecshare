{"version":3,"sources":["new-components/courseEntry.tsx","new-components/header.tsx","new-components/audiofooter.tsx","new-components/lecturetext.tsx","new-components/sidebar.tsx","new-components/maincontainer.tsx","new-components/router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["VERIFY_CODE","gql","CourseEntry","props","warning","checking","useState","input","setInput","crsCode","setCrsCode","clsCode","setClsCode","acsKey","setAcsKey","invalidCode","setInvalidCode","checkingCode","setCheckingCode","history","useHistory","useLazyQuery","variables","onCompleted","error","inputInfos","classCode","courseCode","accessKey","console","log","successMethod","push","checkCode","loading","parseInput","data","undefined","split","returnInfo","className","type","value","onSubmit","event","preventDefault","target","onInput","placeholder","name","Header","useStyles","makeStyles","theme","playbackButton","icon","color","label","valueLabel","buttonContainer","marginBottom","paddingTop","loadingContainer","marginTop","audioContainer","borderTop","borderWidth","borderColor","height","width","controlsContainer","footer","display","palette","text","secondary","padding","justifyContent","backgroundColor","position","right","left","bottom","zIndex","formatTime","seconds","h","Math","floor","m","s","filter","a","join","AudioFooter","useTheme","classes","React","marks","setMarks","duration","setDuration","playing","setPlaying","setValue","isSliding","setIsSliding","document","getElementById","audioElement","setAudioElement","requestRef","useRef","useEffect","cancelAnimationFrame","current","pause","load","animate","time","audioLoaded","metadataLoaded","onChange","seekSeconds","seekNanos","setLabels","requestAnimationFrame","currentTime","toFixed","onloadedmetadata","volume","onended","handleJump","offset","parseInt","currentTarget","targetValue","Container","IconButton","onClick","disabled","root","decimals","play","Slider","e","onChangeCommitted","style","markLabel","max","aria-labelledby","LinearProgress","LectureText","bodyText","words","map","entry","index","startTimeSeconds","endTimeSeconds","currentSeconds","currentNanos","startTimeNano","endTimeNano","key","starttimeseconds","starttimenano","endtimeseconds","endtimenano","word","SideBar","listitems","lectures","GET_LECTURES","isOpen","setIsOpen","listLoading","useQuery","schools","courses","item","updateIndex","changeLecture","handleExpand","GET_AUDIO_TRANSCRIPTION","MainContainer","lectureBody","audioComponent","currentValue","setCurrentValue","setCurrentNanos","lectureText","setLectureText","textLoading","setTextLoading","audioUrl","setAudioUrl","setAudioLoaded","metaDataLoaded","setMetaDataLoaded","lectureIndex","setLectureIndex","infos","formatSeconds","lastSecond","formatNanos","lastNano","nums","length","entries","startSeconds","endSeconds","startNanos","endNanos","wordEntry","starttime","endtime","wordStorage","lecture","protectedClass","transcription","audio","CircularProgress","nanos","controls","src","id","preload","onCanPlay","onLoadedMetadata","LecshareRouter","validated","setValidated","initInfos","queryInfo","setQueryInfo","basename","process","exact","path","render","location","to","pathname","state","from","cache","InMemoryCache","link","HttpLink","uri","client","ApolloClient","App","Helmet","charSet","href","rel","Boolean","window","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"orBAMA,IAAMA,EAAcC,IAAH,KAqIFC,MAnHf,SAAqBC,GAA0B,IAsEvCC,EACAC,EAvEsC,EAChBC,mBAAS,IADO,mBACnCC,EADmC,KAC5BC,EAD4B,OAEbF,mBAAS,IAFI,mBAEnCG,EAFmC,KAE1BC,EAF0B,OAGZJ,mBAAS,IAHG,mBAGnCK,EAHmC,KAG1BC,EAH0B,OAIdN,mBAAS,IAJK,mBAInCO,EAJmC,KAI3BC,EAJ2B,OAKJR,oBAAS,GALL,mBAKnCS,EALmC,KAKtBC,EALsB,OAMFV,oBAAS,GANP,mBAMnCW,EANmC,KAMrBC,EANqB,KAOpCC,EAAUC,cAP0B,EASaC,YAAarB,EAAa,CAC7EsB,UAAW,CACPb,UACAE,UACAE,UAEJU,YAAa,WACT,GAAGC,EACCN,GAAgB,GAChBF,GAAe,OACZ,CACHE,GAAgB,GAChBF,GAAe,GACf,IAAIS,EAA4B,CAC5BC,UAAWf,EACXgB,WAAYlB,EACZmB,UAAWf,GAEfgB,QAAQC,IAAI,YACZ3B,EAAM4B,cAAcN,GACpBN,EAAQa,KAAK,aA7BiB,mBASnCC,EATmC,YASdT,GATc,EASvBU,QATuB,EASdV,OAyBtBW,GAlCoC,EASPC,KATO,EASDd,UAyBtB,WAEf,QAAUe,GAAP9B,EACC,MAAO,GAEX,IACI+B,EADU/B,EACM+B,MAAM,KAEtBC,EAA4B,CAC5Bb,UAAWY,EAAM,GACjBX,WAAYW,EAAM,GAClBV,UAAWU,EAAM,IAMrB,OAHA5B,EAAW4B,EAAM,IACjB1B,EAAW0B,EAAM,IACjBxB,EAAUwB,EAAM,IACTC,IA8CX,OAxBGf,IAAUT,IACTC,GAAe,GACfE,GAAgB,IAQhBb,EALAY,EAMI,2CAJA,2BAAOuB,UAAU,cAAcC,KAAK,SAASC,MAAM,WAQvDtC,EADDW,EAEK,yBAAKyB,UAAU,uBAAf,uBAIA,8BAKJ,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,aAAf,yBACA,yBAAKA,UAAU,YAAf,yIAC0I,6BAD1I,iFAIA,yBAAKA,UAAU,mBACf,0BAAMG,SAnDK,SAACC,GAChB5B,GAAe,GACf4B,EAAMC,iBACNrC,EAASoC,EAAME,OAAOJ,OACTP,IACbjB,GAAgB,GAChBe,MA8CQ,2BAAOO,UAAU,kBAAkBC,KAAK,OAAOM,QA3CxC,SAACH,GAEhB,GADApC,EAASoC,EAAME,OAAOJ,YACGL,GAAtBO,EAAME,OAAOJ,MACCP,KAwC2Da,YAAY,cAAcC,KAAK,eAAc,6BAChH5C,EAAS,8BAEbD,K,MC1HE8C,MARf,WACI,OACI,yBAAKV,UAAU,mBACX,yBAAKA,UAAU,eAAf,c,yHCeNW,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,eAAgB,GAEhBC,KAAM,CACFC,MAAO,SAEXC,MAAO,CACHD,MAAO,SAEXE,WAAY,CACRF,MAAO,SAEXG,gBAAiB,CACbH,MAAO,QACPI,aAAc,OACdC,WAAY,OAEhBC,iBAAkB,CACdC,UAAW,QAEfC,eAAgB,CACZC,UAAW,QACXC,YAAa,MACbC,YAAa,YACbC,OAAQ,QACRC,MAAM,QAGVC,kBAAmB,CACfD,MAAO,OAEXE,OAAQ,CACJC,QAAS,OACThB,MAAOH,EAAMoB,QAAQC,KAAKC,UAC1BC,QAAS,OACTC,eAAgB,SAChBC,gBAAiB,QACjBC,SAAU,QACVC,MAAO,EACPC,KAAM,EACNC,OAAQ,EACRC,OAAQ,EACRvB,aAAc,YAIf,SAASwB,EAAWC,GACvB,IAAMC,EAAIC,KAAKC,MAAMH,EAAU,MACzBI,EAAIF,KAAKC,MAAOH,EAAU,KAAQ,IAClCK,EAAIH,KAAKC,MAAMH,EAAU,IAC/B,MAAO,CACHC,EACAG,EAAI,EAAIA,EAAKH,EAAI,IAAMG,EAAIA,GAAK,IAChCC,EAAI,EAAIA,EAAI,IAAMA,GACpBC,QAAO,SAAAC,GAAC,OAAIA,KAAGC,KAAK,KAiLXC,MA9Kf,SAAqB3F,GACjB,IAAMkD,EAAQ0C,cACRC,EAAU7C,EAAUE,GAFgB,EAGhB4C,IAAM3F,SAAS,CAAC,CAACoC,MAAO,EAAGe,MAAO,MAHlB,mBAGnCyC,EAHmC,KAG5BC,EAH4B,OAIVF,IAAM3F,SAAS,KAJL,mBAInC8F,EAJmC,KAIzBC,EAJyB,OAKZJ,IAAM3F,UAAS,GALH,mBAKnCgG,EALmC,KAK1BC,EAL0B,OAMhBN,IAAM3F,SAAS,GANC,mBAMnCoC,EANmC,KAM5B8D,EAN4B,OAORP,IAAM3F,UAAS,GAPP,mBAOnCmG,EAPmC,KAOxBC,EAPwB,OAQFT,IAAM3F,SAASqG,SAASC,eAAe,iBARrC,mBAQnCC,EARmC,KAQrBC,EARqB,KASpCC,EAAkBd,IAAMe,SAE9BC,qBAAU,WAEN,OADAH,EAAgBH,SAASC,eAAe,iBAClC,WACe,MAAdC,IACCK,qBAAqBH,EAAWI,SAChCN,EAAaO,QACbP,EAAaQ,WAGtB,IAEH,IAAMC,EAAU,SAAVA,EAAWC,GACVpH,EAAMqH,aAAerH,EAAMsH,iBACvBtH,EAAMuH,UACLvH,EAAMuH,SAASC,IAAeC,KAGlCpB,EAASmB,KACTE,EAAUF,MAEdZ,EAAWI,QAAUW,sBAAsBR,IAIzCO,EAAY,SAACN,GACfpB,EAAS,CACL,CACIzD,MAAO,EACPe,MAAO2B,EAAWmC,IAEtB,CACI7E,MAAOmE,EAAaT,SACpB3C,MAAO2B,EAAWyB,EAAaT,cAiDrCuB,EAAc,SAACJ,GACjB,OAAOhC,KAAKC,MAAMqB,EAAakB,cAG7BH,EAAY,SAACL,GAGf,QADkC,IADnBV,EAAakB,aACWC,UAAa,KAIvC,MAAdnB,IACCA,EAAaoB,iBAAmB,WAC5B5B,EAAYQ,EAAaT,UACzByB,EAAU,GACVhB,EAAaqB,OAAS,KAIb,MAAdrB,IACCA,EAAasB,QAAU,WACnB5B,GAAW,GACXC,EAAS,KAIjB,IAAM4B,EAAa,SAACxF,GAChB,IAAMyF,EAASC,SAAS1F,EAAM2F,cAAc7F,OACtC8F,EAAcH,EAAS3F,EAC7Bb,QAAQC,IAAIuG,EAAQ3F,EAAO8F,GACxBA,EAAc,GAAKA,EAAcpC,IAChCI,EAASgC,GACLlC,IACAuB,EAAUW,GACPrI,EAAMuH,UACLvH,EAAMuH,SAASc,EAAa,IAGpC3B,EAAakB,YAAcS,EAC3BhC,EAASgC,KAIjB,OACI,4BAAQhG,UAAWwD,EAAQzB,QACvB,kBAACkE,EAAA,EAAD,CAAWjG,UAAWwD,EAAQhC,gBACvB7D,EAAMsH,eAKR,kBAACgB,EAAA,EAAD,CAAWjG,UAAWwD,EAAQ1B,mBAC3B,kBAACmE,EAAA,EAAD,CAAWjG,UAAWwD,EAAQrC,iBAC1B,kBAAC+E,EAAA,EAAD,CAAYzF,KAAM,WAAYP,OAAQ,GAAIiG,QAASP,EAAYQ,SAAUlG,EAAO,GAAK,GACjF,kBAAC,IAAD,CAAcF,UAAWwD,EAAQzC,QAErC,kBAACmF,EAAA,EAAD,CAAY1C,QAAS,CAAC6C,KAAM7C,EAAQ1C,gBAAiBqF,QAzEnD,WAClB,IAAMpB,EAAOI,IACb,GAAGrB,EAAS,CACRC,GAAW,GACXM,EAAaO,QACbF,qBAAqBH,EAAWI,SAChC,IAAI2B,IAA+C,IAAzBjC,EAAakB,aAAiBC,UAAa,IACrEnG,QAAQC,IAAIgH,GACZjH,QAAQC,IAAI+E,EAAaT,eAGzBG,GAAW,GACXQ,EAAWI,QAAUW,sBAAsBR,GAC3CT,EAAakC,OAEjBlB,EAAUN,KA2DWjB,EAAU,kBAAC,IAAD,CAAW9D,UAAWwD,EAAQzC,OAAW,kBAAC,IAAD,CAAef,UAAWwD,EAAQzC,QAE1F,kBAACmF,EAAA,EAAD,CAAYzF,KAAM,UAAWP,MAAO,GAAIiG,QAASP,EAAYQ,SAAUlG,EAAQ,GAAK0D,GAChF,kBAAC,IAAD,CAAe5D,UAAWwD,EAAQzC,SAG1C,kBAACyF,EAAA,EAAD,CACAtG,MAAOA,EACPgF,SA5GI,SAACuB,EAAQvG,GACrB+D,IACAC,GAAa,GACbQ,qBAAqBH,EAAWI,UAGpCX,EAAS9D,GACNvC,EAAMuH,UACLvH,EAAMuH,SAAShF,EAAiB,GAEpCmF,EAAUnF,IAmGEwG,kBAhGU,SAACD,EAAQvG,GAC5BA,IACCmE,EAAakB,YAAcrF,EACvB4D,IACAO,EAAakC,OACbxC,GAAW,KAGnBG,GAAa,GACbK,EAAWI,QAAUW,sBAAsBR,IAwF/B6B,MAAO,CAAC3F,MAAO,SACfwC,QAAS,CACLoD,UAAWpD,EAAQvC,MACnBC,WAAYsC,EAAQtC,YAExBwC,MAAOA,EACPmD,IAAKjD,EACLkD,kBAAgB,uBA3BhB,yBAAK9G,UAAWwD,EAAQlC,kBACpB,kBAACyF,EAAA,EAAD,CAAgB/F,MAAM,gB,MCjJ/BgG,MAhDf,SAAqBrJ,GACjB,IAAMsJ,EAAWtJ,EAAMuJ,MAAMC,KAAI,SAACC,EAAOC,GACrC,OAAKD,EAAME,mBAAmBF,EAAMG,gBAAkB5J,EAAM6J,iBAAmBJ,EAAME,kBAAoB3J,EAAM8J,cAAgBL,EAAMM,eAAiB/J,EAAM8J,eAAiBL,EAAMO,YAG3K,0BAAM3H,UAAU,OAAO4H,IAAKP,EAAOQ,iBAAkBT,EAAME,iBAAkBQ,cAAeV,EAAMM,cAAeK,eAAgBX,EAAMG,eAAgBS,YAAaZ,EAAMO,aACtK,yBAAK3H,UAAU,aAAaoH,EAAMa,KAAlC,SAGAtK,EAAM6J,eAAiB,IAAMJ,EAAMG,gBAAkB5J,EAAM6J,eAAe,IAAIJ,EAAME,kBAAoB3J,EAAM6J,eAAe,IAAIJ,EAAME,kBAAoB3J,EAAM6J,eAAe,IAAIJ,EAAMG,eAoB9L,0BAAMvH,UAAU,OAAO4H,IAAKP,EAAOQ,iBAAkBT,EAAME,iBAAkBQ,cAAeV,EAAMM,cAAeK,eAAgBX,EAAMG,eAAgBS,YAAaZ,EAAMO,aACrKP,EAAMa,KADX,QAnBCtK,EAAM6J,iBAAiBJ,EAAME,kBAAoB3J,EAAM8J,eAAiBL,EAAMM,eAAmB/J,EAAM6J,iBAAiBJ,EAAMG,gBAAkB5J,EAAM8J,cAAiBL,EAAMO,YAG1K,0BAAM3H,UAAU,OAAO4H,IAAKP,EAAOQ,iBAAkBT,EAAME,iBAAkBQ,cAAeV,EAAMM,cAAeK,eAAgBX,EAAMG,eAAgBS,YAAaZ,EAAMO,aACtK,yBAAK3H,UAAU,aAAaoH,EAAMa,MADtC,QAQA,0BAAMjI,UAAU,OAAO4H,IAAKP,EAAOQ,iBAAkBT,EAAME,iBAAkBQ,cAAeV,EAAMM,cAAeK,eAAgBX,EAAMG,eAAgBS,YAAaZ,EAAMO,aACrKP,EAAMa,KADX,WAgBhB,OACI,yBAAKjI,UAAU,oBACX,yBAAKA,UAAU,cACf,yBAAKA,UAAU,eACViH,GAEL,yBAAKjH,UAAU,gB,wYC4BZkI,MApFf,SAAiBvK,GAEb,IAgCIwK,EAEIC,EAlCFC,EAAe5K,IAAH,KAFgB,EAyBNK,oBAAS,GAzBH,mBAyB3BwK,EAzB2B,KAyBnBC,EAzBmB,OA0BIzK,oBAAS,GA1Bb,mBA0B3B0K,EA1B2B,aA4BHC,YAASJ,IAAjCzI,EA5B2B,EA4B3BA,KAAMF,EA5BqB,EA4BrBA,QA5BqB,EA4BZV,MAElBU,GACAL,QAAQC,IAAI,yBAOZ6I,EAHAvI,GAAQ4I,GAERJ,EAAWxI,EAAK8I,QAAQ,GAAGC,QAAQ,GAAGnF,QAAQ,GAAG4E,UAC5BjB,KAAI,SAASyB,EAAMvB,GACpC,OACI,yBAAKrH,UAAU,gBAAgB4H,IAAKP,EAAOlB,QAAS,kBAnB1C,SAACkB,GACnB1J,EAAMkL,YAAYxB,GAkBgDyB,CAAczB,KACnEe,EAASf,GAAO5G,SAOjB,yBAAKT,UAAU,iBAAf,qBAGhB,IAAM+I,EAAe,WACjB1J,QAAQC,IAAIgJ,GACZC,GAAWD,IAGf,OAAIA,EAWI,6BACI,yBAAKtI,UAAU,wBACX,yBAAKA,UAAU,cACf,yBAAKA,UAAU,eAAemG,QAAS4C,GAAvC,MACA,yBAAK/I,UAAU,cACf,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,cACVmI,KAhBb,6BACI,yBAAKnI,UAAU,0BACf,yBAAKA,UAAU,cACX,yBAAKA,UAAU,eAAemG,QAAS4C,GAAvC,S,m2BC9DAtL,IAAH,KAAjB,IAOMuL,EAA0BvL,IAAH,KA8NdwL,MAxLf,SAAuBtL,GACnB,IAgKIuL,EAOAC,EAxK0C,EAENrL,mBAAS,GAFH,mBAEvCsL,EAFuC,KAEzBC,EAFyB,OAGNvL,mBAAS,GAHH,mBAGvC2J,EAHuC,KAGzB6B,EAHyB,OAIRxL,mBAHH,IADW,mBAIvCyL,EAJuC,KAI1BC,EAJ0B,OAKR1L,oBAAS,GALD,mBAKvC2L,EALuC,KAK1BC,EAL0B,OAMd5L,mBAAS,IANK,mBAMvC6L,EANuC,KAM7BC,EAN6B,OAOR9L,oBAAS,GAPD,mBAOvCkH,EAPuC,KAO1B6E,EAP0B,OAQF/L,oBAAS,GARP,mBAQvCgM,EARuC,KAQvBC,EARuB,OASRjM,oBAAS,GATD,gCAUNA,mBAAS,IAVH,mBAUvCkM,EAVuC,KAUzBC,EAVyB,OAWhBnM,mBAASH,EAAMuM,MAAM/K,YAXL,mBAWvClB,EAXuC,aAYhBH,mBAASH,EAAMuM,MAAMhL,YAZL,mBAYvCf,EAZuC,cAalBL,mBAASH,EAAMuM,MAAM9K,YAbH,qBAavCf,GAbuC,MA8BxC8L,IA9BwC,MAe9BvL,cAeM,SAACmG,EAAcqF,GACjC,OAAS,MAANrF,GACYA,EAAKjF,MAAM,KACT,GAENsK,IAITC,GAAc,SAACtF,EAAcuF,GAC/B,GAAS,MAANvF,EAAY,CACX,IAAIwF,EAAOxF,EAAKjF,MAAM,KACtB,OAAqB,GAAlByK,EAAK,GAAGC,QACPD,EAAK,IAAM,KACHA,EAAK,KAELA,EAAK,GAGjB,OAAOD,GAjD+B,GA4Hf7B,YAASO,EAAyB,CAC7DlK,UAAW,CACPb,UACAE,UACAE,aAJDuB,GA5HuC,GA4HvCA,KAAMF,GA5HiC,GA4HjCA,QAiDb,OA7K8C,GA4HxBV,MAQnBU,IACCL,QAAQC,IAAI,YAGbM,IAAQ6J,IACPpK,QAAQC,IAAI,gBAGZkK,EAlFY,SAAC5J,GACb,IAOIsH,EAA2B,GART,uBAUtB,YAA6BtH,EAAKsH,MAAMuD,UAAxC,+CAAmD,CAAC,IAAD,yBAAhCvK,GAAgC,WAC3CwK,OAAoB,EACpBC,OAAkB,EAClBC,OAAkB,EAClBC,OAAgB,EAChBC,OAAiB,EAkBrB,GAhBsB,MAAnB5K,EAAM6K,WACLL,EAdmB,EAenBE,EAbiB,IAejBF,EAAeP,GAAcjK,EAAM6K,UAjBhB,GAkBnBH,EAAaP,GAAYnK,EAAM6K,UAhBd,IAmBD,MAAjB7K,EAAM8K,SACLL,EAvBiB,EAwBjBE,EAtBe,IAwBfF,EAAaR,GAAcjK,EAAM8K,QA1BhB,GA2BjBH,EAAWR,GAAYnK,EAAM8K,QAzBd,IA4BA,gBAAf9K,EAAMD,KAAV,CAMQ6K,EAAY5K,EAAM+H,KASX/H,EAAM+H,KACN/H,EAAMD,KAErB,IAAIgL,EAA+B,CAC/BhD,KAAM6C,EACNxD,iBAAkBoD,EAClBnD,eAAgBoD,EAChBjD,cAAekD,EACfjD,YAAakD,GAEjB3D,EAAM1H,KAAKyL,QAxBP/D,EAAMA,EAAMsD,OAAO,GAAGvC,KAAOf,EAAMA,EAAMsD,OAAO,GAAGvC,KAAO/H,EAAM+H,KAChE6C,EAAY5K,EAAM+H,MAnCJ,kFA+DtB,OAAOf,EAkBCgE,CAAQtL,GAAKuL,eAAe/C,SAAS4B,GAAcoB,gBAE3D1B,GAAe,IAGhB9J,IAAkB,IAAV+J,IACPtK,QAAQC,IAAIM,GAAKuL,eAAe/C,SAAS4B,GAAcqB,OACvDzB,EAAYhK,GAAKuL,eAAe/C,SAAS4B,GAAcqB,QAiBvDnC,EADAO,EACc,6BAAK,yBAAKzJ,UAAU,cAAa,yBAAKA,UAAU,eAAc,kBAACsL,EAAA,EAAD,QAE9D,kBAAC,EAAD,CAAapE,MAAOqC,EAAa9B,aAAcA,EAAcD,eAAgB4B,IAK/FD,EAAiB,kBAAC,EAAD,CAAajE,SAzJV,SAAChF,EAAeqL,GAChClC,EAAgBnJ,GAChBoJ,EAAgBiC,IAuJiCvG,YAAaA,EAAaC,eAAgB6E,IAI3F,yBAAK9J,UAAU,WACP,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAS6I,YA1JD,SAACxB,GACjBuC,EAAY,IACZC,GAAe,GACfE,GAAkB,GAClBL,GAAe,GACfO,EAAgB5C,MAsJR,2BAAOmE,UAAU,EAAOC,IAAK9B,EAAU+B,GAAG,eAAeC,QAAQ,OAAOC,UA5B9D,WAClB/B,GAAe,GACfxK,QAAQC,IAAI,oBA0B8FuM,iBAvBvF,WACnB9B,GAAkB,GAClB1K,QAAQC,IAAI,oBAsBH4J,EACAC,I,6SClOG1L,IAAH,KAsDFqO,MAxCf,WAEI,IAFsB,EAGchO,mBAAS,GAHvB,gCAIcA,mBAAS,MAJvB,gCAKYA,oBAAS,IALrB,mBAKfiO,EALe,KAKJC,EALI,OAMYlO,wBAJ9BmO,GAFkB,mBAMfC,EANe,KAMJC,EANI,KAatB,OACI,yBAAKnM,UAAU,mBACX,kBAAC,IAAD,CAAQoM,SAAUC,aACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,CAAahN,cAVZ,SAAC2K,GAClB8B,GAAa,GACbG,EAAajC,OAUD,kBAAC,IAAD,CACIqC,KAAK,QACLC,OAAQ,gBAAEC,EAAF,EAAEA,SAAF,OACJV,EACI,kBAAC,EAAD,CAAe7B,MAAOgC,IAEtB,kBAAC,IAAD,CACIQ,GAAI,CACAC,SAAS,IACTC,MAAO,CAAEC,KAAMJ,aCzCjDK,EAAQ,IAAIC,IACZC,EAAO,IAAIC,IAAS,CACxBC,IAAK,wCAGDC,EAA8C,IAAIC,IAAa,CACnEN,QACAE,SAmBaK,EAhBO,WAEpB,OACE,yBAAKrN,UAAU,OACb,kBAACsN,EAAA,OAAD,KACE,0BAAMC,QAAQ,UACd,2CACA,0BAAMC,KAAK,8DAA8DC,IAAI,gBAE/E,kBAAC,IAAD,CAAgBN,OAAQA,GACtB,kBAAC,EAAD,SClBYO,QACW,cAA7BC,OAAOlB,SAASmB,UAEe,UAA7BD,OAAOlB,SAASmB,UAEhBD,OAAOlB,SAASmB,SAASC,MACvB,2DCZNC,IAAStB,OAAO,kBAAC,EAAD,MAASrI,SAASC,eAAe,SDmI3C,kBAAmB2J,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.79afa965.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useHistory} from \"react-router-dom\";\nimport '../new-component-css/courseentry.css'\nimport gql from 'graphql-tag';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nconst VERIFY_CODE = gql`\n    query VERIFY_CODE($crsCode: String!, $clsCode: String!, $acsKey: String!) {\n        protectedClass(courseCode: $crsCode classCode: $clsCode accessKey: $acsKey) {\n            name\n        }\n    }\n`;\n\ntype QueryInfoType = {\n    classCode: String,\n    courseCode: String,\n    accessKey: String\n}\n\ninterface CourseEntryProps {\n    successMethod?: (queryInfo: QueryInfoType) => void\n}\n\nfunction CourseEntry(props: CourseEntryProps) {\n    const [input, setInput] = useState(\"\");\n    const [crsCode, setCrsCode]= useState(\"\");\n    const [clsCode, setClsCode] = useState(\"\");\n    const [acsKey, setAcsKey] = useState(\"\");\n    const [invalidCode, setInvalidCode] = useState(false);\n    const [checkingCode, setCheckingCode] = useState(false);\n    const history = useHistory();\n\n    const [checkCode, {loading, error, data, variables}] = useLazyQuery(VERIFY_CODE, {\n        variables: {\n            crsCode,\n            clsCode,\n            acsKey\n        },\n        onCompleted: () => {\n            if(error) {\n                setCheckingCode(false);\n                setInvalidCode(true);\n            } else {\n                setCheckingCode(false);\n                setInvalidCode(false);\n                let inputInfos: QueryInfoType = {\n                    classCode: clsCode,\n                    courseCode: crsCode,\n                    accessKey: acsKey\n                };\n                console.log(\"success!\")\n                props.successMethod(inputInfos);\n                history.push(\"/view\")\n            }\n        }\n    })\n\n    const parseInput = () => {\n        //example input \"UVIC#ECON#416-201809#A00-vikelabs-\"\n        if(input==undefined) {\n            return '';\n        }\n        var toParse = input;\n        var split = toParse.split(\"-\");\n\n        let returnInfo: QueryInfoType = {\n            classCode: split[0],\n            courseCode: split[1],\n            accessKey: split[2]\n        };\n\n        setCrsCode(split[0])\n        setClsCode(split[1])\n        setAcsKey(split[2]);\n        return returnInfo;\n    }\n\n    const submitCode = (event) => {\n        setInvalidCode(false);\n        event.preventDefault();\n        setInput(event.target.value)\n        var parsed = parseInput();\n        setCheckingCode(true);\n        checkCode();\n    }\n\n    const updateCode = (event) => {\n        setInput(event.target.value)\n        if(event.target.value != undefined) {\n            var parsed = parseInput();\n        }\n    }\n\n    let warning: any;\n    let checking: any;\n\n    if(error && !invalidCode) {\n        setInvalidCode(true);\n        setCheckingCode(false);\n    }\n\n    if(!checkingCode) {\n        checking = (\n            <input className=\"entryButton\" type=\"submit\" value=\"Submit\"/>\n        )\n    } else {\n        checking = (\n            <div>loading...</div>\n        )\n    }\n    if(invalidCode) {\n        warning = (\n            <div className=\"invalidNotification\">Invalid course code</div>\n        )\n    }else {\n        warning = (\n            <div></div>\n        )\n    }\n\n    return(\n        <div className=\"courseEntryContainer\">\n            <div className=\"infoTitle\">Long Live the Lecture</div>\n            <div className=\"infoText\">\n                Lecshare is a lecture sharing and transcription service that allows students to revisit, search, read, and deeply understand lectures.<br/>\n                Spend less time trying to write everything down and more time in the lecture.\n                </div>\n            <div className=\"courseCodeEntry\">   \n            <form onSubmit={submitCode}>\n                <input className=\"courseTextInput\" type=\"text\" onInput={updateCode} placeholder=\"Course code\" name=\"coursename\"/><br/>\n                {checking}<br/>\n            </form>\n            {warning}\n            </div>\n        </div>\n    );\n} \n\nexport default CourseEntry;","import React from 'react';\nimport '../new-component-css/header.css'\n\nfunction Header() {\n    return(\n        <div className=\"headerContainer\">\n            <div className=\"headerTitle\">Lecshare</div>\n        </div>\n    )\n}\n\nexport default Header;","import React, {useEffect, useState} from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Container } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Forward30Icon from '@material-ui/icons/Forward30';\r\nimport Replay10Icon from '@material-ui/icons/Replay10';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { type } from 'os';\r\n\r\n\r\n\r\ninterface AudioPlayerProps {\r\n    value?: number\r\n    onChange?: (value: number, nanos: number) => void\r\n    audioLoaded: boolean\r\n    metadataLoaded: boolean\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    playbackButton: {\r\n    },\r\n    icon: {\r\n        color: \"black\",\r\n    },\r\n    label: {\r\n        color: \"black\"\r\n    },\r\n    valueLabel: {\r\n        color: \"black\"\r\n    },\r\n    buttonContainer: {\r\n        color: \"black\",\r\n        marginBottom: '-5px',\r\n        paddingTop: '5px'\r\n    },\r\n    loadingContainer: {\r\n        marginTop: '45px'\r\n    },\r\n    audioContainer: {\r\n        borderTop: 'solid',\r\n        borderWidth: '1px',\r\n        borderColor: 'lightgray',\r\n        height: \"100px\",\r\n        width:'100%'\r\n        \r\n    },\r\n    controlsContainer: {\r\n        width: '70%'\r\n    },\r\n    footer: {\r\n        display: 'flex',\r\n        color: theme.palette.text.secondary,\r\n        padding: 'auto',\r\n        justifyContent: 'center',\r\n        backgroundColor: 'white',\r\n        position: \"fixed\",\r\n        right: 0,\r\n        left: 0,\r\n        bottom: 5,\r\n        zIndex: 1,\r\n        marginBottom: \"-5px\"\r\n    }\r\n}));\r\n\r\nexport function formatTime(seconds: number) {\r\n    const h = Math.floor(seconds / 3600);\r\n    const m = Math.floor((seconds % 3600) / 60);\r\n    const s = Math.floor(seconds % 60);\r\n    return [\r\n        h,\r\n        m > 9 ? m : (h ? '0' + m : m || '0'),\r\n        s > 9 ? s : '0' + s,\r\n    ].filter(a => a).join(':');\r\n}\r\n  \r\nfunction AudioFooter(props: AudioPlayerProps) {\r\n    const theme = useTheme();\r\n    const classes = useStyles(theme);\r\n    const [marks, setMarks] = React.useState([{value: 0, label: '',}])\r\n    const [duration, setDuration] = React.useState(100);\r\n    const [playing, setPlaying] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [isSliding, setIsSliding] = React.useState(false);\r\n    const [audioElement, setAudioElement] = React.useState(document.getElementById(\"currentAudio\") as HTMLMediaElement)\r\n    const requestRef: any = React.useRef();\r\n\r\n    useEffect(() => {\r\n        setAudioElement(document.getElementById(\"currentAudio\") as HTMLMediaElement);\r\n        return() => {\r\n            if(audioElement!=null) {\r\n                cancelAnimationFrame(requestRef.current)\r\n                audioElement.pause();\r\n                audioElement.load();\r\n            }    \r\n        }\r\n    }, []);\r\n\r\n    const animate = (time: any) => {\r\n        if(props.audioLoaded && props.metadataLoaded) {\r\n            if(props.onChange) {\r\n                props.onChange(seekSeconds(), seekNanos());\r\n            }\r\n        \r\n            setValue(seekSeconds());\r\n            setLabels(seekSeconds());\r\n        }\r\n        requestRef.current = requestAnimationFrame(animate);\r\n\r\n    }\r\n\r\n    const setLabels = (time:number) => {\r\n        setMarks([\r\n            {\r\n                value: 0,\r\n                label: formatTime(time)\r\n            },\r\n            {\r\n                value: audioElement.duration,\r\n                label: formatTime(audioElement.duration)\r\n            }\r\n        ])\r\n    }\r\n    \r\n    const handleValue = (e: any, value: any) => {\r\n        if(!isSliding){\r\n            setIsSliding(true);\r\n            cancelAnimationFrame(requestRef.current);\r\n        } \r\n        \r\n        setValue(value as number);\r\n        if(props.onChange){\r\n            props.onChange(value as number, 0);\r\n        }\r\n        setLabels(value);\r\n    }\r\n\r\n    const handleValueCommit = (e: any, value: any) => {\r\n        if(value as number){\r\n            audioElement.currentTime = value as number;\r\n            if(!playing){\r\n                audioElement.play();\r\n                setPlaying(true);\r\n            }\r\n        }\r\n        setIsSliding(false);\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        \r\n    }\r\n\r\n    const handlePlaying = () => {\r\n        const time = seekSeconds();\r\n        if(playing) {\r\n            setPlaying(false);\r\n            audioElement.pause();\r\n            cancelAnimationFrame(requestRef.current);\r\n            let decimals: Number = +((audioElement.currentTime*100).toFixed()) % 100;\r\n            console.log(decimals)\r\n            console.log(audioElement.duration);\r\n \r\n        } else {\r\n            setPlaying(true);\r\n            requestRef.current = requestAnimationFrame(animate);\r\n            audioElement.play();\r\n        }\r\n        setLabels(time);\r\n    }\r\n\r\n    const seekSeconds = (time?: number) => {\r\n        return Math.floor(audioElement.currentTime as number);\r\n    }\r\n\r\n    const seekNanos = (time?: number) => {\r\n        var initial = (audioElement.currentTime as number) \r\n        let decimals: number = +((initial*100).toFixed()) % 100;\r\n        return decimals\r\n    }\r\n\r\n    if(audioElement!=null) {\r\n        audioElement.onloadedmetadata = function() {\r\n            setDuration(audioElement.duration as number);\r\n            setLabels(0);\r\n            audioElement.volume = 0.5;\r\n        }\r\n    } \r\n\r\n    if(audioElement!=null) {\r\n        audioElement.onended = function() {\r\n            setPlaying(false);\r\n            setValue(0);\r\n        }\r\n    }\r\n\r\n    const handleJump = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        const offset = parseInt(event.currentTarget.value);\r\n        const targetValue = offset + value;\r\n        console.log(offset, value, targetValue)\r\n        if(targetValue > 0 && targetValue < duration){\r\n            setValue(targetValue);\r\n            if(!playing){\r\n                setLabels(targetValue);\r\n                if(props.onChange){\r\n                    props.onChange(targetValue, 0);\r\n                }\r\n            }\r\n            audioElement.currentTime = targetValue;\r\n            setValue(targetValue);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <footer className={classes.footer}>\r\n            <Container className={classes.audioContainer}>\r\n                { !props.metadataLoaded ? (\r\n                    <div className={classes.loadingContainer}>\r\n                        <LinearProgress color=\"primary\"/>\r\n                    </div>\r\n                ) :\r\n                (<Container className={classes.controlsContainer}>\r\n                    <Container className={classes.buttonContainer} >\r\n                        <IconButton name={\"backward\"} value={-10} onClick={handleJump} disabled={value -10 < 0}>\r\n                            <Replay10Icon className={classes.icon}/>\r\n                        </IconButton>\r\n                        <IconButton classes={{root: classes.playbackButton}} onClick={handlePlaying}>\r\n                            {playing ? <PauseIcon className={classes.icon} /> : <PlayArrowIcon className={classes.icon}/>}\r\n                        </IconButton>\r\n                        <IconButton name={\"forward\"} value={30} onClick={handleJump} disabled={value + 30 > duration}>\r\n                            <Forward30Icon className={classes.icon}/>\r\n                        </IconButton>\r\n                    </Container>\r\n                    <Slider \r\n                    value={value} \r\n                    onChange={handleValue}\r\n                    onChangeCommitted={handleValueCommit}\r\n                    style={{color: 'black'}} \r\n                    classes={{\r\n                        markLabel: classes.label,\r\n                        valueLabel: classes.valueLabel\r\n                    }} \r\n                    marks={marks}\r\n                    max={duration}\r\n                    aria-labelledby=\"continuous-slider\"\r\n                    />\r\n                </Container>)\r\n                }\r\n            </Container>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default AudioFooter;","import React from 'react';\nimport '../new-component-css/lecturetext.css'\n\ntype WordStorageType = {\n    word: string,\n    startTimeSeconds: Number,\n    endTimeSeconds: Number,\n    endTimeNano: Number,\n    startTimeNano: Number\n}\n\ninterface LectureTextProps {\n    words: Array<WordStorageType>,\n    currentSeconds: number\n    currentNanos: number\n}\n\ninterface LectureProps {\n    courseName: string\n    currentSeconds: number\n    currentNanos: number\n    value?: number\n}\n\nfunction LectureText(props: LectureTextProps) {\n    const bodyText = props.words.map((entry, index) => { \n        if (+entry.startTimeSeconds==+entry.endTimeSeconds && props.currentSeconds == +entry.startTimeSeconds && props.currentNanos > +entry.startTimeNano && props.currentNanos <= +entry.endTimeNano) {\n            return(\n                // @ts-ignore\n                <span className=\"word\" key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\n                    <div className=\"highlight\">{entry.word}&nbsp;</div>\n                </span>\n            )\n        } else if ((props.currentSeconds + 1 == +entry.endTimeSeconds || props.currentSeconds-1==+entry.startTimeSeconds)&&(props.currentSeconds+1!=+entry.startTimeSeconds || props.currentSeconds-1!=+entry.endTimeSeconds)) {\n            if ((props.currentSeconds==+entry.startTimeSeconds && props.currentNanos >= +entry.startTimeNano) || (props.currentSeconds==+entry.endTimeSeconds && props.currentNanos <  +entry.endTimeNano)) {\n                return(\n                    // @ts-ignore\n                    <span className=\"word\" key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\n                        <div className=\"highlight\">{entry.word}</div>\n                        &nbsp;\n                    </span>                 \n                )\n            } else {\n                return(\n                    // @ts-ignore\n                    <span className=\"word\" key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\n                        {entry.word}&nbsp;\n                    </span>\n                )\n            }\n        } else {  \n            return(\n                // @ts-ignore\n                <span className=\"word\" key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\n                    {entry.word}&nbsp;\n                </span>\n            )\n        }\n    }\n    \n)\n    return(\n        <div className=\"lectureContainer\">\n            <div className=\"topSpacer\"/>\n            <div className=\"lectureText\">\n                {bodyText}\n            </div>\n            <div className=\"botSpacer\"></div>\n        </div>\n    )\n}\n\nexport default LectureText;","import React from 'react';\nimport '../new-component-css/sidebar.css'\nimport {useEffect, useState} from 'react';\nimport {useQuery} from '@apollo/react-hooks';\nimport gql from 'graphql-tag'\nimport { LecshareStore } from \"../store/LecshareStore\";\n\ninterface SideBarProps {\n    updateIndex?: (index: number) => void\n}\n\nfunction SideBar(props: SideBarProps) {\n\n    const GET_LECTURES = gql`\n    {\n        schools(code:\"VIKELABS\") {\n        name\n        description\n        courses {\n            name\n            classes {\n                term\n                section\n                lectures {\n                    name\n                }\n            }\n        }\n        }\n    }\n    `;\n\n    const changeLecture = (index) => {\n        props.updateIndex(index);\n    }\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [listLoading, setListLoading] = useState(true);\n\n    const {data, loading, error} = useQuery(GET_LECTURES);\n    \n    if (loading) {\n        console.log(\"loading lecture list!\")\n    }\n\n    let listitems: any;\n    if (data && listLoading) {\n        let lectures: any\n        lectures = data.schools[0].courses[0].classes[0].lectures\n        listitems = lectures.map(function(item, index) {\n            return(\n                <div className=\"lectureOption\" key={index} onClick={() => changeLecture(index)}>\n                    {lectures[index].name}\n                </div>\n            )\n        })\n        //setListLoading(false);\n        \n    } else {\n        listitems = <div className=\"lectureOption\">Oops, no lectures</div>\n    }\n\n    const handleExpand = () => {\n        console.log(isOpen)\n        setIsOpen(!isOpen);\n    }\n\n    if(!isOpen) {\n        return(\n            <div>\n                <div className=\"sideBarContainerClosed\">\n                <div className=\"topSpacer\"></div>\n                    <div className=\"expandButton\" onClick={handleExpand}>hi</div>\n                </div>\n            </div>\n        )\n    } else {\n        return(\n            <div>\n                <div className=\"sideBarContainerOpen\">\n                    <div className=\"topSpacer\"></div>\n                    <div className=\"expandButton\" onClick={handleExpand}>hi</div>\n                    <div className=\"listTitle\"></div>\n                    <div className=\"listCourseTitle\"></div>\n                    <div className=\"courseList\">\n                        {listitems}\n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n    \n}\n\nexport default SideBar;","import React, {useEffect, useState} from 'react';\nimport Header from './header';\nimport AudioFooter from './audiofooter'\nimport LectureText from './lecturetext'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport gql from 'graphql-tag'\nimport {useQuery} from '@apollo/react-hooks'\nimport SideBar from './sidebar';\nimport {useHistory} from \"react-router-dom\";\n\nconst VERIFY_CODE = gql`\n    query VERIFY_CODE($crsCode: String!, $clsCode: String!, $acsKey: String!) {\n        protectedClass(courseCode: $crsCode classCode: $clsCode accessKey: $acsKey) {\n            name\n        }\n    }\n`;\nconst GET_AUDIO_TRANSCRIPTION = gql`\n    query VERIFY_CODE($crsCode: String!, $clsCode: String!, $acsKey: String!) {\n        protectedClass(courseCode: $crsCode classCode: $clsCode accessKey: $acsKey) {\n            name\n            lectures {\n                name\n                audio\n                transcription {\n                    words {\n                        word\n                        starttime\n                        endtime\n                        type\n                    }\n                }\n            }\n        } \n    }\n`;\n\ntype WordStorageType = {\n    word: string,\n    startTimeSeconds: Number,\n    endTimeSeconds: Number,\n    endTimeNano: Number,\n    startTimeNano: Number\n}\n\ntype QueryInfoType = {\n    classCode: String,\n    courseCode: String,\n    accessKey: String\n}\n\ninterface MainContainerProps {\n    infos: QueryInfoType\n}\n\nfunction MainContainer(props: MainContainerProps) {\n    let initArray: WordStorageType[] = []\n    const [currentValue, setCurrentValue] = useState(0);\n    const [currentNanos, setCurrentNanos] = useState(0);\n    const [lectureText, setLectureText] = useState(initArray);\n    const [textLoading, setTextLoading] = useState(true);\n    const [audioUrl, setAudioUrl] = useState(\"\");\n    const [audioLoaded, setAudioLoaded] = useState(false);\n    const [metaDataLoaded, setMetaDataLoaded] = useState(false);\n    const [sideBarOpen, setSideBarOpen] = useState(false);\n    const [lectureIndex, setLectureIndex] = useState(0);\n    const [crsCode, setCrsCode] = useState(props.infos.courseCode);\n    const [clsCode, setClsCode] = useState(props.infos.classCode);\n    const [acsKey, setAcsKey] = useState(props.infos.accessKey);\n\n    const history = useHistory();\n    \n    const changeValue = (value: number, nanos: number) => {\n        setCurrentValue(value)\n        setCurrentNanos(nanos)\n    };\n\n    const changeIndex = (index: number) => {\n        setAudioUrl(\"\");\n        setAudioLoaded(false);\n        setMetaDataLoaded(false);\n        setTextLoading(true);\n        setLectureIndex(index);\n    }\n\n    const formatSeconds = (time: string, lastSecond: Number) => {\n        if(time!=null) {\n            var nums = time.split(\".\")\n            return +nums[0]\n        } else {\n            return lastSecond\n        }\n    }\n\n    const formatNanos = (time: string, lastNano: Number) => {\n        if(time!=null) {\n            var nums = time.split(\".\")\n            if(nums[1].length == 1) {\n                nums[1] += \"0\";\n                return +nums[1]\n            } else {\n                return +nums[1]\n            }\n        } else {\n            return lastNano;\n        }\n        \n    }\n\n    const capitalize = (s) => {\n        return s && s[0].toUpperCase() + s.slice(1);\n    }\n\n    const lecture = (data) => {\n        let previousWord = \"\";\n        let previousType;\n        let previousEndSeconds = 0;\n        let previousStartSeconds = 0;\n        let previousEndNanos = 0;\n        let previousStartNanos = 0;\n\n        let words: WordStorageType[] = []\n\n        for (const [index, value] of data.words.entries()) {\n            let startSeconds: Number;\n            let endSeconds: Number;\n            let startNanos: Number;\n            let endNanos: Number;\n            let wordEntry: string;\n\n            if(value.starttime == null) {\n                startSeconds = previousStartSeconds;\n                startNanos = previousStartNanos;\n            } else {\n                startSeconds = formatSeconds(value.starttime, previousStartSeconds);\n                startNanos = formatNanos(value.starttime, previousStartNanos);\n            }\n\n            if(value.endtime == null) {\n                endSeconds = previousEndSeconds;\n                endNanos = previousEndNanos;\n            } else {\n                endSeconds = formatSeconds(value.endtime, previousEndSeconds);\n                endNanos = formatNanos(value.endtime, previousEndNanos)\n            }\n\n            if (value.type === \"punctuation\") {\n                words[words.length-1].word = words[words.length-1].word + value.word\n                wordEntry = value.word;\n                continue\n            } else if (previousType === \"punctuation\" || previousWord === \"\") {\n                if(previousWord !== \",\"){\n                    wordEntry = value.word;\n                } else {\n                    wordEntry = value.word;\n                }\n            } else if(previousType === \"pronunciation\"){\n                wordEntry = value.word;\n            } else {\n                wordEntry = value.word;\n            }\n            previousWord = value.word;\n            previousType = value.type;\n\n            let wordStorage: WordStorageType = {\n                word: wordEntry,\n                startTimeSeconds: startSeconds,\n                endTimeSeconds: endSeconds,\n                startTimeNano: startNanos,\n                endTimeNano: endNanos,\n            } \n            words.push(wordStorage)\n        }\n        // return data.words.map(({word}) => (\n        //   <span>{word}</span>\n        // ))\n        return words;\n      }\n\n    const {data, loading, error} = useQuery(GET_AUDIO_TRANSCRIPTION, {\n        variables: {\n            crsCode,\n            clsCode,\n            acsKey\n        }\n    });\n\n    if(loading) {\n        console.log(\"Loading!\");\n    }\n\n    if(data && textLoading) {\n        console.log(\"setting text\")\n        let words: any\n        words = lecture(data.protectedClass.lectures[lectureIndex].transcription);\n        setLectureText(words);\n        setTextLoading(false);\n    }\n\n    if(data && audioUrl==\"\") {\n        console.log(data.protectedClass.lectures[lectureIndex].audio);\n        setAudioUrl(data.protectedClass.lectures[lectureIndex].audio);\n    }\n\n    const confirmLoaded = () => {\n        setAudioLoaded(true);\n        console.log(\"Audio can play!\");\n    }\n\n    const confirmAvailable=() => {\n        setMetaDataLoaded(true);\n        console.log(\"Got metadata!\");\n    }\n\n    \n\n    let lectureBody: any;\n    if (textLoading) {\n        lectureBody = <div><div className=\"topSpacer\"/><div className=\"textLoading\"><CircularProgress /></div></div>\n    } else {\n        lectureBody = <LectureText words={lectureText} currentNanos={currentNanos} currentSeconds={currentValue}/>\n    }\n\n    let audioComponent: any;\n    \n    audioComponent = <AudioFooter onChange={changeValue} audioLoaded={audioLoaded} metadataLoaded={metaDataLoaded}/>\n    \n    //where to place audio so that it does not render every tiume?\n    return(\n        <div className=\"capsule\">\n                <Header/>\n                <SideBar updateIndex={changeIndex}/>\n                <audio controls={false} src={audioUrl} id=\"currentAudio\" preload=\"auto\" onCanPlay={confirmLoaded} onLoadedMetadata={confirmAvailable}></audio>\n                {lectureBody}\n                {audioComponent}\n        </div>\n    )\n}\n\nexport default MainContainer;","import React, {useEffect, useState} from 'react';\nimport CourseEntry from './courseEntry';\nimport MainContainer from './maincontainer';\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport {BrowserRouter as Router, Switch, Route, Redirect, Link} from \"react-router-dom\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst VERIFY_CODE = gql`\n    query VERIFY_CODE($courseCode: String, $classCode: String, $accessKey: String) {\n        protectedClass(courseCode:\"UVIC#ECON#416\" classCode: \"201809#A00\" accessKey: \"vikelabs\") {\n            name\n        }\n    }\n`;\n\ntype QueryInfoType = {\n    classCode: String,\n    courseCode: String,\n    accessKey: String\n}\n\nfunction LecshareRouter() {\n\n    let initInfos: QueryInfoType\n    const [pageNumber, setPageNumber] = useState(0);\n    const [courseName, setCourseName] = useState(\"/\");\n    const [validated, setValidated] = useState(false);\n    const [queryInfo, setQueryInfo] = useState(initInfos);\n\n    const changeCourse = (infos: QueryInfoType) => {\n        setValidated(true);\n        setQueryInfo(infos);\n    }\n\n    return(\n        <div className=\"routerContainer\">\n            <Router basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <CourseEntry successMethod={changeCourse}/>\n                    </Route>\n                    <Route \n                        path=\"/view\" \n                        render={({location}) => \n                            validated ? (\n                                <MainContainer infos={queryInfo}/>\n                            ) : (\n                                <Redirect\n                                    to={{\n                                        pathname:\"/\",\n                                        state: { from: location }\n                                    }}\n                                />\n                            )}\n                    />     \n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default LecshareRouter;","import React from 'react'\nimport './App.css'\nimport MainContainer from \"./new-components/maincontainer\";\nimport {Helmet} from \"react-helmet\";\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport {ApolloClient} from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport {ApolloProvider} from \"@apollo/react-hooks\";\nimport LecshareRouter from \"./new-components/router\";\n\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: 'https://dev.oimo.ca/lecshare/query/'\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link\n});\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>Lecshare</title>\n        <link href=\"https://fonts.googleapis.com/css?family=Habibi&display=swap\" rel=\"stylesheet\"/>\n      </Helmet>\n      <ApolloProvider client={client}>\n        <LecshareRouter/>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}