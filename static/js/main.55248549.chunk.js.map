{"version":3,"sources":["images/protoslideimage.jpg","components/LectureText.tsx","components/LectureSlides.tsx","components/Footer.tsx","components/LectureContent.tsx","components/LectureAudioPlayer.tsx","components/TopBarDrawer.tsx","components/MainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","transcriptionText","fontSize","fontFamily","margin","textAlign","maxWidth","transcriptionWord","display","lineHeight","marginRight","marginTop","LectureContent","props","classes","bodyText","words","map","entry","index","currentValue","startTimeSeconds","className","key","starttimeseconds","starttimenano","startTimeNano","endtimeseconds","endTimeSeconds","endtimenano","endTimeNano","word","style","fontWeight","slideWindow","height","marginLeft","backgroundColor","slideImage","maxHeight","slideContainer","src","happyPlace","footer","color","palette","text","secondary","padding","spacing","paddingLeft","paddingRight","justifyContent","borderTop","borderColor","position","bottom","Footer","Typography","align","state","courseName","textLoad","wordArray","axios","get","then","response","bodyArray","data","section","alternatives","wordStorage","startTime","seconds","endTime","nanos","push","setState","lectureBody","this","CircularProgress","React","Component","playbackButton","formatTime","h","Math","floor","m","s","filter","a","join","LectureAudioPlayer","useState","value","label","marks","setMarks","Howl","source","preload","initializeHowler","howler","duration","setDuration","playing","setPlaying","setValue","isSliding","setIsSliding","requestRef","useRef","useEffect","current","requestAnimationFrame","animate","cancelAnimationFrame","stop","unload","seek","time","onChange","setLabels","on","volume","Container","Button","onClick","pause","play","disabled","LinearProgress","Slider","e","onChangeCommitted","aria-labelledby","max","root","drawer","breakpoints","up","width","flexShrink","appBar","menuButton","toolbar","mixins","drawerPaper","content","flexGrow","TopBarDrawer","container","useTheme","mobileOpen","setMobileOpen","setCurrentValue","handleDrawerToggle","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","MainContainer","changeCourse","changeLecture","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55248549.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/protoslideimage.61347656.jpg\";","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { inheritLeadingComments } from '@babel/types';\nimport { lineHeight, textAlign } from '@material-ui/system';\nimport { workerData } from 'worker_threads';\n\n//TODO conditional font size like Medium\n\n\n\nconst useStyles = makeStyles(theme => ({\n    transcriptionText: {\n        fontSize: 21,\n        fontFamily: 'Roboto Serif, Noto Serif, Times New Roman, serif',\n        margin: 'auto',\n        textAlign: 'left',\n        maxWidth: '40em'\n    },\n    transcriptionWord: {\n        display: 'inline-block',\n        lineHeight: '17px',\n        marginRight: '5px',\n        marginTop: '10px',\n    }\n}));\n\ntype WordStorageType = {\n    word: string,\n    startTimeSeconds: string,\n    endTimeSeconds: string,\n    endTimeNano: number,\n    startTimeNano: number\n}\n\ninterface LectureTextProps {\n    words: Array<WordStorageType>,\n    currentValue: number\n}\n\nexport default function LectureContent(props: LectureTextProps) {\n    \n    const classes = useStyles();\n\n    const bodyText = props.words.map((entry, index) => {\n            if (props.currentValue < +entry.startTimeSeconds) {\n                return(\n                    // @ts-ignore\n                    <span className={classes.transcriptionWord} key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>{entry.word}</span>\n                )\n            } else {\n                return(\n                    // @ts-ignore\n                    <span className={classes.transcriptionWord} key={index} style={{fontWeight: \"bold\"}} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>{entry.word}</span>\n                )\n            }\n        }\n    )\n    \n    return(\n        <div className={classes.transcriptionText}><p>{bodyText}</p></div>\n    )\n}","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport happyPlace from '../images/protoslideimage.jpg'\n\nconst useStyles = makeStyles(theme => ({\n    slideWindow: {\n        height: '500px',\n        marginLeft: '20%',\n        marginRight: '20%',\n        backgroundColor: 'lightblue'\n    },\n    slideImage: {\n        maxHeight: '100%',\n        maxWidth: '100%'\n    },\n    slideContainer: {\n        backgroundColor: 'lightgrey'\n    }\n}));\n\nexport default function LectureContent() {\n    const classes = useStyles();\n    return(\n        <div className={classes.slideContainer}>\n            <div className={classes.slideWindow}>\n                <img className={classes.slideImage} src={happyPlace}></img>\n            </div>\n        </div>\n        \n    )\n}","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    footer: {\r\n        display: 'flex',\r\n        color: theme.palette.text.secondary,\r\n        padding: theme.spacing(3),\r\n        paddingLeft: '10%',\r\n        paddingRight: '10%',\r\n        justifyContent: 'center',\r\n        borderTop: 'solid',\r\n        borderColor: 'lightgrey',\r\n        position: \"relative\",\r\n        bottom: 0\r\n    }\r\n}));\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n    return(\r\n        <footer className={classes.footer}>\r\n            <Typography color='inherit' align='center'>\r\n                Lecshare brought to you by Vikelabs!<br/>\r\n                It is our goal to make learning more accessible to everyone by recording and transcribing lectures.<br/>\r\n                Developed by: Aomi Jokoji, Malcolm Seyd, Alex McRae, Bryce Edwards, Derek Lowlind, Goh Sato, Kevin Matthew, Malaki Vandas, and Ryley Woodland\r\n            </Typography>\r\n        </footer>     \r\n    )\r\n}","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport LectureText from './LectureText'\nimport LectureSlides from './LectureSlides'\nimport Footer from './Footer'\nimport axios from 'axios'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { string } from 'prop-types';\n\ninterface LectureProps {\n    courseName: string,\n    currentValue: number\n}\n\ninterface LectureState {\n    courseName: string,\n    textLoad: boolean,\n    wordArray: Array<WordStorageType>\n}\n\ntype WordStorageType = {\n    word: string,\n    startTimeSeconds: string,\n    endTimeSeconds: string,\n    endTimeNano: number,\n    startTimeNano: number\n}\n\nclass LectureContent extends React.Component<LectureProps, LectureState> {\n\n    //for now this is a local file but eventually we will call to api to get this file. (then store in cache to quickly grab if revisiting the same component)\n    //alternatively we have this call in the backend to create the html which is then sent back (but for demo we do not have)\n    componentDidMount() {\n       axios.get('vikelabs_test1.json').then(response => {\n           let bodyArray: WordStorageType[] = []\n\n           for(var key in response.data) {\n               let section = response.data[key].alternatives[0]\n               for(var key in section.words) {\n                   let wordStorage: WordStorageType = {\n                       word: section.words[key].word,\n                       startTimeSeconds: section.words[key].startTime.seconds,\n                       endTimeSeconds: section.words[key].endTime.seconds,\n                       endTimeNano: section.words[key].endTime.nanos,\n                       startTimeNano: section.words[key].endTime.nanos\n                   }       \n                   bodyArray.push(wordStorage)\n               }\n                \n           }\n           this.setState({wordArray: bodyArray})\n           this.setState({textLoad: true})\n       })\n    }\n\n    constructor(props: LectureProps) {\n        super(props)\n        this.state = {\n            courseName: this.props.courseName,\n            textLoad: false,\n            wordArray: []\n        }\n    }\n\n    render() {\n\n        let lectureBody: any;\n\n        if (this.state.textLoad) {\n            lectureBody = <LectureText words={this.state.wordArray} currentValue={this.props.currentValue}/>\n        } else {\n            lectureBody = <CircularProgress />\n        }\n        return(\n            <div>\n                <LectureSlides/>\n                {lectureBody}\n                <Footer/>\n            </div>     \n        )\n    }\n    \n}\n\nexport default LectureContent;","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { Container, Button } from '@material-ui/core';\nimport Slider from '@material-ui/core/Slider';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {Howl, Howler} from 'howler';\n\ninterface AudioPlayerProps {\n    value?: number\n    source: string\n    onChange?: (value: number) => void\n}\n\nconst useStyles = makeStyles(theme => ({\n    playbackButton: {\n        color: \"white\"\n    },\n}));\n\nfunction initializeHowler(props: AudioPlayerProps){\n    return new Howl({\n        src: props.source,\n        preload: true\n    })\n}\n\nexport function formatTime(seconds: number) {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor(seconds % 60);\n    return [\n        h,\n        m > 9 ? m : (h ? '0' + m : m || '0'),\n        s > 9 ? s : '0' + s,\n    ].filter(a => a).join(':');\n}\n  \nexport default function LectureAudioPlayer(props: AudioPlayerProps) {\n    const classes = useStyles();\n    const [marks, setMarks] = React.useState([{value: 0, label: '',}])\n    const [howler, setHowler] = React.useState(initializeHowler(props));\n    const [duration, setDuration] = React.useState(100);\n    const [playing, setPlaying] = React.useState(false);\n    const [value, setValue] = React.useState(0);\n    const [isSliding, setIsSliding] = React.useState(false);\n\n    const requestRef: any = React.useRef();\n  \n    React.useEffect(() => {\n        // runs on component mount\n        requestRef.current = requestAnimationFrame(animate);\n        return () => {\n            // dismount\n            cancelAnimationFrame(requestRef.current);\n            // unload Howler\n            howler.stop();\n            howler.unload();\n        }\n    },[])\n\n    const seek = (time?: number) => {\n        return Math.floor(howler.seek() as number);\n    }\n\n    const animate = (time: any) => {\n        // The 'state' will always be the initial value here\n        if(howler.state() == \"loaded\"){\n            if(props.onChange){\n                props.onChange(seek());\n            }\n            setValue(seek());\n            setLabels(seek());\n        }\n        requestRef.current = requestAnimationFrame(animate);\n    }\n\n    const setLabels = (time: number) => {\n        setMarks([\n            {\n                value: 0,\n                label: formatTime(time)\n            },\n            {\n                value: howler.duration(),\n                label: formatTime(duration)\n            }\n        ])\n    }\n\n    const handleValue = (e: any, value: any) => {\n        if(!isSliding){\n            setIsSliding(true);\n            cancelAnimationFrame(requestRef.current);\n        } \n        \n        setValue(value as number);\n        if(props.onChange){\n            props.onChange(value as number);\n        }\n        setLabels(value);\n    }\n\n    const handleValueCommit = (e: any, value: any) => {\n        if(value as number){\n            howler.seek(value as number);\n            if(!playing){\n                howler.play();\n                setPlaying(true);\n            }\n        }\n        setIsSliding(false);\n        requestRef.current = requestAnimationFrame(animate);\n    }\n\n    const handlePlaying = () => {\n        const time = seek();\n        if(playing){\n            howler.pause();\n            setPlaying(false);\n        } else {\n            howler.play();\n            setPlaying(true);\n        }\n        \n        setLabels(time)\n    }\n\n    // Howler event when audio is loaded.\n    howler.on('load', () => {\n        setDuration(howler.duration() as number);\n        setLabels(0);\n        howler.volume(0.5);\n    })\n\n    //  Howler event when audio has finished playback.\n    howler.on('end', () => {\n        setPlaying(false);\n        setValue(0);\n    })\n\n    return (\n        <Container>\n            <Button onClick={handlePlaying} disabled={howler.state() != \"loaded\"} >\n                {\n                    playing ? <PauseIcon className={classes.playbackButton} /> : <PlayArrowIcon className={classes.playbackButton} />\n                }\n            </Button>\n            \n            { howler.state() === \"loading\" ? <LinearProgress color=\"secondary\" /> : <Slider \n                value={value} \n                onChange={handleValue}\n                onChangeCommitted={handleValueCommit}\n                style={{color: 'white'}} \n                aria-labelledby=\"continuous-slider\"\n                marks={marks}\n                max={duration}\n                // disable the playback slider\n                disabled={howler.state() != \"loaded\"}\n                key={props.source}\n            />\n                \n                // <CircularProgress style={{color: \"white\"}} />\n            }\n            <Typography>{props.source}</Typography>\n        </Container>\n    )\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport LectureContent from './LectureContent'\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport LectureAudioPlayer from './LectureAudioPlayer';\n\nconst drawerWidth = 200;\n\ninterface DrawerProps {\n  courseName: string,\n  container?: Element\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function TopBarDrawer(props: DrawerProps) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [currentValue, setCurrentValue] = React.useState(0);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const changeValue = (value: number) => {\n    setCurrentValue(value)\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {['Lecture 1', 'Lecture 2'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{<MenuBookIcon/>}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n    </div>\n  );\n  \n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Lecshare \n          </Typography>\n         <LectureAudioPlayer source={'vikelabs_test1.ogg'} onChange={changeValue}/>\n        </Toolbar>\n        \n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n            <LectureContent courseName={props.courseName} currentValue={currentValue}/>\n      </main>\n    </div>\n  ); \n}\n","import React from 'react'\nimport TopBarDrawer from \"./TopBarDrawer\";\nimport Footer from \"./Footer\"\n\ninterface MainState {\n    courseName:string\n}\n\nclass MainContainer extends React.Component<{}, MainState> {\n    \n    constructor(props: any) {\n        super(props);\n        this.state = {\n            courseName: 'SENG310'\n        }\n    }\n\n    ///method for handling course change (get new data, audio, text, lectures etc.)\n    changeCourse = () => {\n        \n    }\n    ///method for handling change in lecture, changing data but not available lectures or course\n    changeLecture = () => {\n    \n    }\n    \n    render() {\n        return(\n            <div className='main'>\n                <TopBarDrawer courseName={this.state.courseName}/>\n            </div>\n        )\n    }\n}\n\nexport default MainContainer;","import React from 'react';\nimport './App.css';\nimport MainContainer from './components/MainContainer'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}