{"version":3,"sources":["components/LectureText.tsx","components/LectureContent.tsx","components/LectureAudioPlayer.tsx","components/TopBarDrawer.tsx","components/LectureContainer.tsx","components/PrivateRoute.tsx","components/LoginPage.tsx","components/LoginRouter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","transcriptionText","fontSize","fontFamily","margin","textAlign","marginBottom","maxWidth","transcriptionWord","display","lineHeight","padding","marginLeft","marginRight","marginTop","transcriptionWordHighlighted","backgroundColor","borderRadius","transition","LectureContent","props","classes","bodyText","words","map","entry","index","startTimeSeconds","endTimeSeconds","currentSeconds","currentNanos","startTimeNano","endTimeNano","key","starttimeseconds","starttimenano","endtimeseconds","endtimenano","className","word","state","courseName","textLoad","wordArray","axios","get","then","response","startTimeNanosEntry","bodyArray","data","section","alternatives","startTime","nanos","wordStorage","seconds","endTime","push","setState","lectureBody","this","CircularProgress","React","Component","playbackButton","icon","color","label","valueLabel","buttonContainer","footer","palette","text","secondary","justifyContent","position","right","left","bottom","formatTime","h","Math","floor","m","s","filter","a","join","LectureAudioPlayer","useState","value","marks","setMarks","Howl","src","source","preload","initializeHowler","howler","duration","setDuration","playing","setPlaying","setValue","isSliding","setIsSliding","loaded","setLoaded","requestRef","useRef","useEffect","cancelAnimationFrame","current","stop","unload","seekSeconds","time","seek","animate","onChange","decimal","round","seekNanos","setLabels","requestAnimationFrame","handleJump","event","offset","parseInt","currentTarget","targetValue","console","log","on","volume","Container","IconButton","name","onClick","disabled","pause","play","root","Slider","e","onChangeCommitted","style","markLabel","max","aria-labelledby","LinearProgress","drawerWidth","drawer","breakpoints","up","width","flexShrink","appBar","menuButton","spacing","toolbar","mixins","drawerPaper","content","flexGrow","TopBarDrawer","container","useTheme","mobileOpen","setMobileOpen","currentValue","setCurrentValue","setCurrentNanos","handleDrawerToggle","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","Toolbar","aria-label","edge","Typography","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","displacement","LectureContainer","changeCourse","changeLecture","PrivateRoute","component","isSignedIn","path","rest","render","routeProps","to","LoginPage","userName","setUsername","password","setPassword","alignContent","noValidate","autoComplete","TextField","id","target","type","Button","verifyLogin","LecturePage","LoginRouter","authenticated","setAuthenticated","username","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5514bb29.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { inheritLeadingComments } from '@babel/types';\r\nimport { lineHeight, textAlign } from '@material-ui/system';\r\nimport { workerData } from 'worker_threads';\r\n\r\n//TODO conditional font size like Medium\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    transcriptionText: {\r\n        fontSize: 21,\r\n        fontFamily: 'Roboto Serif, Noto Serif, Times New Roman, serif',\r\n        margin: 'auto',\r\n        textAlign: 'left',\r\n        marginBottom: '100px',\r\n        maxWidth: '40em',\r\n    },\r\n    transcriptionWord: {\r\n        display: 'inline-block',\r\n        lineHeight: '17px',\r\n        // marginLeft: '5px',\r\n        // marginTop: '10px',\\\r\n\r\n        // Padding is highlighted, so it should be uniform on all sides.\r\n        padding: '5px',\r\n        marginLeft: '-5px',\r\n        marginRight: '-5px',\r\n        // Margins make up for extra space\r\n        marginTop: '5px',\r\n        marginBottom: '5px',\r\n    },\r\n    transcriptionWordHighlighted: {\r\n        display: 'inline-block',\r\n        lineHeight: '17px',\r\n        // marginLeft: '5px',\r\n        // marginTop: '10px',\r\n        \r\n        // Padding is highlighted, so it should be uniform on all sides.\r\n        padding: '5px',\r\n        marginLeft: '-5px',\r\n        marginRight: '-5px',\r\n        // Margins make up for extra space\r\n        marginTop: '5px',\r\n        marginBottom: '5px',\r\n\r\n        backgroundColor: '#ffbed0',\r\n        borderRadius: '10px',\r\n        transition: 'backgroundColor 100ms linear'\r\n    }\r\n}));\r\n\r\ntype WordStorageType = {\r\n    word: string,\r\n    startTimeSeconds: string,\r\n    endTimeSeconds: string,\r\n    endTimeNano: number,\r\n    startTimeNano: number\r\n}\r\n\r\ninterface LectureTextProps {\r\n    words: Array<WordStorageType>,\r\n    currentSeconds: number\r\n    currentNanos: number\r\n}\r\n\r\nexport default function LectureContent(props: LectureTextProps) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    const bodyText = props.words.map((entry, index) => {\r\n            if (+entry.startTimeSeconds==+entry.endTimeSeconds && props.currentSeconds == +entry.startTimeSeconds && props.currentNanos >= +entry.startTimeNano && props.currentNanos <= +entry.endTimeNano) {\r\n                return(\r\n                    // @ts-ignore\r\n                    <span key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                        <div className={classes.transcriptionWordHighlighted}>{entry.word}</div>\r\n                        &nbsp;\r\n                    </span>                 \r\n                )\r\n            } else if (+entry.startTimeSeconds + 1 == +entry.endTimeSeconds) {\r\n                if ((props.currentSeconds==+entry.startTimeSeconds && props.currentNanos >= +entry.startTimeNano) || (props.currentSeconds==+entry.endTimeSeconds && props.currentNanos <= +entry.endTimeNano)) {\r\n                    return(\r\n                        // @ts-ignore\r\n                        <span key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                            <div className={classes.transcriptionWordHighlighted}>{entry.word}</div>\r\n                            &nbsp;\r\n                        </span>                 \r\n                    )\r\n                } else {\r\n                    return(\r\n                        // @ts-ignore\r\n                        <span className={classes.transcriptionWord} key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                            {entry.word}&nbsp;\r\n                        </span>\r\n                    )\r\n                }\r\n            } else {  \r\n                return(\r\n                    // @ts-ignore\r\n                    <span className={classes.transcriptionWord} key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                        {entry.word}&nbsp;\r\n                    </span>\r\n                )\r\n            }\r\n        }\r\n    )\r\n    \r\n    return(\r\n        <div className={classes.transcriptionText}><p>{bodyText}</p></div>\r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport LectureText from './LectureText'\r\nimport LectureSlides from './LectureSlides'\r\nimport Footer from './Footer'\r\nimport axios from 'axios'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { string } from 'prop-types';\r\nimport LectureAudioPlayer from './LectureAudioPlayer'\r\n\r\ninterface LectureProps {\r\n    courseName: string,\r\n    currentSeconds: number\r\n    currentNanos: number\r\n    value?: number\r\n}\r\n\r\ninterface LectureState {\r\n    courseName: string,\r\n    textLoad: boolean,\r\n    wordArray: Array<WordStorageType>\r\n}\r\n\r\ntype WordStorageType = {\r\n    word: string,\r\n    startTimeSeconds: string,\r\n    endTimeSeconds: string,\r\n    endTimeNano: number,\r\n    startTimeNano: number\r\n}\r\n\r\nclass LectureContent extends React.Component<LectureProps, LectureState> {\r\n\r\n    //for now this is a local file but eventually we will call to api to get this file. (then store in cache to quickly grab if revisiting the same component)\r\n    //alternatively we have this call in the backend to create the html which is then sent back (but for demo we do not have)\r\n    componentDidMount() {\r\n        axios.get('../vikelabs_test1.json').then(response => {\r\n            let bodyArray: WordStorageType[] = []\r\n            var startTimeEntry;\r\n            var startTimeNanosEntry;\r\n            var endTimeEntry;\r\n            var endTimeNanosEntry; \r\n            for (var key in response.data) {\r\n                let section = response.data[key].alternatives[0]\r\n                for (var key in section.words) {\r\n                    if(!(\"nanos\" in section.words[key].startTime)) {\r\n                        startTimeNanosEntry = 0\r\n                    } else {\r\n                        startTimeNanosEntry =  section.words[key].startTime.nanos\r\n                    }\r\n                    let wordStorage: WordStorageType = {\r\n                        word: section.words[key].word,\r\n                        startTimeSeconds: section.words[key].startTime.seconds,\r\n                        endTimeSeconds: section.words[key].endTime.seconds,\r\n                        endTimeNano: section.words[key].endTime.nanos,\r\n                        startTimeNano: startTimeNanosEntry\r\n                    }       \r\n                    bodyArray.push(wordStorage)\r\n                }\r\n                    \r\n            }\r\n            this.setState({wordArray: bodyArray})\r\n            this.setState({textLoad: true})\r\n        })\r\n    }\r\n\r\n    constructor(props: LectureProps) {\r\n        super(props)\r\n        this.state = {\r\n            courseName: this.props.courseName,\r\n            textLoad: false,\r\n            wordArray: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let lectureBody: any;\r\n\r\n        if (this.state.textLoad) {\r\n            lectureBody = <LectureText words={this.state.wordArray} currentSeconds={this.props.currentSeconds} currentNanos={this.props.currentNanos}/>\r\n        } else {\r\n            lectureBody = <CircularProgress />\r\n        }\r\n        return(\r\n            <div>\r\n                {/* <LectureSlides/> */}\r\n                {lectureBody}\r\n                {/*<Footer/>*/}\r\n            </div>     \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default LectureContent;","import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Container, Button } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Forward30Icon from '@material-ui/icons/Forward30';\r\nimport Replay10Icon from '@material-ui/icons/Replay10';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {Howl, Howler} from 'howler';\r\n\r\ninterface AudioPlayerProps {\r\n    value?: number\r\n    source: string\r\n    onChange?: (value: number, nanos: number) => void\r\n    displacement: number\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    playbackButton: {\r\n    },\r\n    icon: {\r\n        color: \"black\",\r\n    },\r\n    label: {\r\n        color: \"black\"\r\n    },\r\n    valueLabel: {\r\n        color: \"black\"\r\n    },\r\n    buttonContainer: {\r\n        color: \"black\",\r\n        marginBottom: '-5px'\r\n    },\r\n    footer: {\r\n        display: 'flex',\r\n        color: theme.palette.text.secondary,\r\n        padding: 'auto',\r\n        justifyContent: 'center',\r\n        backgroundColor: 'snow',\r\n        position: \"fixed\",\r\n        right: 0,\r\n        left: 300,\r\n        bottom: 0\r\n    }\r\n}));\r\n\r\nfunction initializeHowler(props: AudioPlayerProps){\r\n    return new Howl({\r\n        src: props.source,\r\n        preload: true\r\n    })\r\n}\r\n\r\nexport function formatTime(seconds: number) {\r\n    const h = Math.floor(seconds / 3600);\r\n    const m = Math.floor((seconds % 3600) / 60);\r\n    const s = Math.floor(seconds % 60);\r\n    return [\r\n        h,\r\n        m > 9 ? m : (h ? '0' + m : m || '0'),\r\n        s > 9 ? s : '0' + s,\r\n    ].filter(a => a).join(':');\r\n}\r\n  \r\nexport default function LectureAudioPlayer(props: AudioPlayerProps) {\r\n    const classes = useStyles();\r\n    const [marks, setMarks] = React.useState([{value: 0, label: '',}])\r\n    const [howler, setHowler] = React.useState(initializeHowler(props));\r\n    const [duration, setDuration] = React.useState(100);\r\n    const [playing, setPlaying] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [isSliding, setIsSliding] = React.useState(false);\r\n    const [loaded, setLoaded] = React.useState(false);\r\n\r\n    const requestRef: any = React.useRef();\r\n  \r\n    React.useEffect(() => {\r\n        // runs on component mount\r\n        // requestRef.current = requestAnimationFrame(animate);\r\n        return () => {\r\n            // dismount\r\n            cancelAnimationFrame(requestRef.current);\r\n            // unload Howler\r\n            howler.stop();\r\n            howler.unload();\r\n        }\r\n    },[])\r\n\r\n    const seekSeconds = (time?: number) => {\r\n        return Math.floor(howler.seek() as number);\r\n    }\r\n\r\n    const seekNanos = (time?: number) => {\r\n        var initial = (howler.seek() as number) \r\n        var decimal = (initial % 1) * 10\r\n        var rounded = Math.round(decimal)\r\n        return rounded * 100000000\r\n    }\r\n\r\n    const animate = (time: any) => {\r\n        // The 'state' will always be the initial value here\r\n        if(howler.state() == \"loaded\"){\r\n            if(props.onChange){\r\n                props.onChange(seekSeconds(), seekNanos());\r\n            }\r\n            setValue(seekSeconds());\r\n            setLabels(seekSeconds());\r\n        }\r\n        requestRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    const setLabels = (time: number) => {\r\n        setMarks([\r\n            {\r\n                value: 0,\r\n                label: formatTime(time)\r\n            },\r\n            {\r\n                value: howler.duration(),\r\n                label: formatTime(duration)\r\n            }\r\n        ])\r\n    }\r\n\r\n    const handleValue = (e: any, value: any) => {\r\n        if(!isSliding){\r\n            setIsSliding(true);\r\n            cancelAnimationFrame(requestRef.current);\r\n        } \r\n        \r\n        setValue(value as number);\r\n        if(props.onChange){\r\n            props.onChange(value as number, 0);\r\n        }\r\n        setLabels(value);\r\n    }\r\n\r\n    const handleValueCommit = (e: any, value: any) => {\r\n        if(value as number){\r\n            howler.seek(value as number);\r\n            if(!playing){\r\n                howler.play();\r\n                setPlaying(true);\r\n                \r\n            }\r\n        }\r\n        setIsSliding(false);\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        \r\n    }\r\n\r\n    const handlePlaying = () => {\r\n        const time = seekSeconds();\r\n        if(playing){\r\n            howler.pause();\r\n            cancelAnimationFrame(requestRef.current);\r\n            setPlaying(false);\r\n        } else {\r\n            howler.play();\r\n            requestRef.current = requestAnimationFrame(animate);\r\n            setPlaying(true);\r\n        }\r\n        \r\n        setLabels(time)\r\n    }\r\n\r\n    const handleJump = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        const offset = parseInt(event.currentTarget.value);\r\n        const targetValue = offset + value;\r\n        console.log(offset, value, targetValue)\r\n        if(targetValue > 0 && targetValue < duration){\r\n            setValue(targetValue);\r\n            if(!playing){\r\n                setLabels(targetValue);\r\n                if(props.onChange){\r\n                    props.onChange(targetValue, 0);\r\n                }\r\n            }\r\n            howler.seek(targetValue);\r\n        }\r\n    }\r\n\r\n    // Howler event when audio is loaded.\r\n    howler.on('load', () => {\r\n        setDuration(howler.duration() as number);\r\n        setLabels(0);\r\n        setLoaded(true);\r\n        howler.volume(0.5);\r\n    })\r\n\r\n    //  Howler event when audio has finished playback.\r\n    howler.on('end', () => {\r\n        setPlaying(false);\r\n        setValue(0);\r\n    })\r\n\r\n    return (\r\n        <footer className={classes.footer}>\r\n            <Container>\r\n                { !loaded ? (\r\n                    <LinearProgress color=\"primary\" />\r\n                ) :\r\n                (<Container>\r\n                    <Container className={classes.buttonContainer} >\r\n                        <IconButton name={\"backward\"} value={-10} onClick={handleJump} disabled={value -10 < 0}>\r\n                            <Replay10Icon className={classes.icon}/>\r\n                        </IconButton>\r\n                        <IconButton onClick={handlePlaying} classes={{root: classes.playbackButton}}>\r\n                            {playing ? <PauseIcon className={classes.icon} /> : <PlayArrowIcon className={classes.icon} />}\r\n                        </IconButton>\r\n                        <IconButton name={\"forward\"} value={30} onClick={handleJump} disabled={value + 30 > duration}>\r\n                            <Forward30Icon className={classes.icon}/>\r\n                        </IconButton>\r\n                    </Container>\r\n                    <Slider \r\n                    value={value} \r\n                    onChange={handleValue}\r\n                    onChangeCommitted={handleValueCommit}\r\n                    style={{color: 'black'}} \r\n                    classes={{\r\n                        markLabel: classes.label,\r\n                        valueLabel: classes.valueLabel\r\n                    }} \r\n                    marks={marks}\r\n                    max={duration}\r\n                    key={props.source}\r\n                    aria-labelledby=\"continuous-slider\"\r\n                    />\r\n                </Container>)\r\n                }\r\n            </Container>\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport LectureContent from './LectureContent'\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\n\r\nimport LectureAudioPlayer from './LectureAudioPlayer';\r\nimport Footer from './Footer';\r\nimport AudioContainer from './AudioContainer';\r\n\r\nconst drawerWidth = 300;\r\n\r\ninterface DrawerProps {\r\n  courseName: string,\r\n  container?: Element\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n    backgroundColor: 'mediumaquamarine',\r\n    boxShadow: 'none'\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor: 'steelblue',\r\n    color: 'white'\r\n  },\r\n  content: {\r\n    flexGrow: 1\r\n  },\r\n}));\r\n\r\nexport default function TopBarDrawer(props: DrawerProps) {\r\n  const { container } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const [currentValue, setCurrentValue] = React.useState(0);\r\n  const [currentNanos, setCurrentNanos] = React.useState(0);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const changeValue = (value: number, nanos: number) => {\r\n    setCurrentValue(value)\r\n    setCurrentNanos(nanos)\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {['Lecture 1', 'Lecture 2'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{<MenuBookIcon/>}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n    </div>\r\n  );\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Lecshare \r\n          </Typography>\r\n         \r\n        </Toolbar>\r\n        \r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n            <LectureContent courseName={props.courseName} currentSeconds={currentValue} currentNanos={currentNanos}/>\r\n            <LectureAudioPlayer source={'../vikelabs_test1.ogg'} onChange={changeValue} displacement={drawerWidth}/>\r\n      </main>\r\n    </div>\r\n  ); \r\n}\r\n","import React from 'react'\nimport TopBarDrawer from \"./TopBarDrawer\";\nimport Footer from \"./Footer\"\n\ninterface MainState {\n    courseName:string\n}\n\nclass LectureContainer extends React.Component<{}, MainState> {\n    \n    constructor(props: any) {\n        super(props);\n        this.state = {\n            courseName: 'SENG310'\n        }\n    }\n\n    ///method for handling course change (get new data, audio, text, lectures etc.)\n    changeCourse = () => {\n        \n    }\n    ///method for handling change in lecture, changing data but not available lectures or course\n    changeLecture = () => {\n    \n    }\n    \n    render() {\n        return(\n            <div className='main'>\n                <TopBarDrawer courseName={this.state.courseName}/>\n            </div>\n        )\n    }\n}\n\nexport default LectureContainer;","import * as React from 'react';\nimport {\n    Route,\n    Redirect,\n    RouteProps,\n} from 'react-router-dom';\n\ninterface PrivateRouteProps {\n    // tslint:disable-next-line:no-any\n    component: any;\n    isSignedIn: boolean;\n    path:string;\n};\n\nconst PrivateRoute = (props: PrivateRouteProps) => {\n    const { component: Component, isSignedIn, path, ...rest } = props;\n\n    return (\n        <Route\n        path={path}\n            {...rest}\n            render={(routeProps: PrivateRouteProps) =>\n                isSignedIn ? (\n                    <Component {...routeProps} />\n                ) : (\n                        <Redirect to='/lecshare-main/login'/>\n                    )\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport '../component-css/loginpagecss.css';\nimport { useState } from 'react';\n\ninterface LoginProps {\n    verifyLogin: (username: string, password: string) => boolean;\n    authenticated: boolean;\n}\n\n\nfunction LoginPage(props: LoginProps) {\n\n    const [verifying, setVerifying] = useState(true);\n    const [userName, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    \n    const useStyles = makeStyles(theme => ({\n        root: {\n            '& > *': {\n                margin: theme.spacing(1),\n                alignContent: 'center'\n            },        \n        },\n    }));\n    const classes = useStyles();\n\n    const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUsername(e.target.value);\n    }\n    const handlePasswordChange =(e: React.ChangeEvent<HTMLInputElement>) =>  {\n        setPassword(e.target.value);\n    }\n\n    const handleLogIn = () =>  {\n        let success = props.verifyLogin(userName, password);\n        if(success) {\n            console.log(\"valid credentials!\");\n        } else {\n            console.log(\"invalid credentials!\");\n        }\n        \n    }\n\n    return (\n        <div className=\"loginContainer\">\n            Lecshare Login\n            <div className=\"formContainer\">\n                <form className={classes.root} noValidate autoComplete=\"off\">\n                    <div>\n                        <TextField \n                            id=\"standard-required\" \n                            label=\"Username\" \n                            onChange= {handleUsernameChange}\n                        />\n                    </div>\n                    <div>\n                        <TextField\n                            id=\"standard-password-input\"\n                            label=\"Password\"\n                            type=\"password\"\n                            autoComplete=\"current-password\"\n                            onChange = {handlePasswordChange}\n                        />\n                    </div>\n                    <Button color=\"primary\" onClick={handleLogIn}>\n                        Log In\n                    </Button>\n                </form>\n            </div>\n        </div>\n    \n    );\n}\n\nexport default LoginPage;","import React, {useState} from 'react'\nimport { BrowserRouter as Router, Route, Link, Redirect} from 'react-router-dom';\nimport LectureContainer from './LectureContainer'\nimport PrivateRoute from './PrivateRoute'\nimport LoginPage from './LoginPage';\n\n\ninterface AuthState {\n    authenticated:boolean\n}\n\nfunction LecturePage() {\n    return <LectureContainer/>\n} \n\nfunction LoginRouter({}) {\n    \n    const [authenticated, setAuthenticated] = useState(false);\n\n    const verifyLogin = (username: string, password: string) : boolean => {\n        if(username==\"admin\" && password==\"admin\") {\n            setAuthenticated(true);\n            return true;\n        } else {\n            return false;\n        }  \n    }\n    return(\n        <div>\n            <Router>\n                <PrivateRoute path=\"/lecshare-main\" component={LecturePage} isSignedIn={authenticated} />\n                <Route path=\"/lecshare-main/login\"><LoginPage verifyLogin={verifyLogin} authenticated={authenticated} /></Route>\n                \n            </Router>\n        </div>\n        \n    )\n}\n\nexport default LoginRouter;","import React from 'react';\nimport './App.css';\nimport LoginRouter from \"./components/LoginRouter\";\n\n\n\n\n\nconst App: React.FC = () => {\n  \n\n\n  return (\n    <div className=\"App\">\n      <LoginRouter />\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}