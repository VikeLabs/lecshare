{"version":3,"sources":["images/protoslideimage.jpg","components/LectureText.tsx","components/LectureSlides.tsx","components/Footer.tsx","components/LectureContent.tsx","components/LectureAudioPlayer.tsx","components/TopBarDrawer.tsx","components/MainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","transcriptionText","fontSize","fontFamily","margin","textAlign","maxWidth","transcriptionWord","display","lineHeight","marginRight","marginTop","LectureContent","props","classes","bodyText","words","map","entry","index","currentValue","startTimeSeconds","className","key","starttimeseconds","starttimenano","startTimeNano","endtimeseconds","endTimeSeconds","endtimenano","endTimeNano","word","style","fontWeight","slideWindow","height","marginLeft","backgroundColor","slideImage","maxHeight","slideContainer","src","happyPlace","footer","color","palette","text","secondary","padding","spacing","paddingLeft","paddingRight","justifyContent","borderTop","borderColor","position","bottom","Footer","Typography","align","state","courseName","textLoad","wordArray","axios","get","then","response","bodyArray","data","section","alternatives","wordStorage","startTime","seconds","endTime","nanos","push","setState","lectureBody","this","CircularProgress","console","log","React","Component","playbackButton","formatTime","h","Math","floor","m","s","filter","a","join","LectureAudioPlayer","useState","value","label","marks","setMarks","Howl","source","preload","initializeHowler","howler","duration","setDuration","playing","setPlaying","setValue","setHowlerTime","useEffect","stop","unload","interval","setInterval","time","getCurrentTime","setLabels","returnMethod","clearInterval","round","seek","on","volume","Container","Button","onClick","pause","play","disabled","LinearProgress","Slider","onChange","e","onChangeCommitted","aria-labelledby","max","root","drawer","breakpoints","up","width","flexShrink","appBar","menuButton","toolbar","mixins","drawerPaper","content","flexGrow","TopBarDrawer","container","useTheme","mobileOpen","setMobileOpen","setCurrentValue","handleDrawerToggle","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","variant","noWrap","process","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","MainContainer","changeCourse","changeLecture","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b552469d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/protoslideimage.61347656.jpg\";","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { inheritLeadingComments } from '@babel/types';\nimport { lineHeight, textAlign } from '@material-ui/system';\nimport { workerData } from 'worker_threads';\n\n//TODO conditional font size like Medium\n\n\n\nconst useStyles = makeStyles(theme => ({\n    transcriptionText: {\n        fontSize: 21,\n        fontFamily: 'Roboto Serif, Noto Serif, Times New Roman, serif',\n        margin: 'auto',\n        textAlign: 'left',\n        maxWidth: '40em'\n    },\n    transcriptionWord: {\n        display: 'inline-block',\n        lineHeight: '17px',\n        marginRight: '5px',\n        marginTop: '10px',\n    }\n}));\n\ntype WordStorageType = {\n    word: string,\n    startTimeSeconds: string,\n    endTimeSeconds: string,\n    endTimeNano: number,\n    startTimeNano: number\n}\n\ninterface LectureTextProps {\n    words: Array<WordStorageType>,\n    currentValue: number\n}\n\nexport default function LectureContent(props: LectureTextProps) {\n    \n    const classes = useStyles();\n\n    const bodyText = props.words.map((entry, index) => {\n            if (props.currentValue < +entry.startTimeSeconds) {\n                return(\n                    // @ts-ignore\n                    <span className={classes.transcriptionWord} key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>{entry.word}</span>\n                )\n            } else {\n                return(\n                    // @ts-ignore\n                    <span className={classes.transcriptionWord} key={index} style={{fontWeight: \"bold\"}} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>{entry.word}</span>\n                )\n            }\n        }\n    )\n    \n    return(\n        <div className={classes.transcriptionText}><p>{bodyText}</p></div>\n    )\n}","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport happyPlace from '../images/protoslideimage.jpg'\n\nconst useStyles = makeStyles(theme => ({\n    slideWindow: {\n        height: '500px',\n        marginLeft: '20%',\n        marginRight: '20%',\n        backgroundColor: 'lightblue'\n    },\n    slideImage: {\n        maxHeight: '100%',\n        maxWidth: '100%'\n    },\n    slideContainer: {\n        backgroundColor: 'lightgrey'\n    }\n}));\n\nexport default function LectureContent() {\n    const classes = useStyles();\n    return(\n        <div className={classes.slideContainer}>\n            <div className={classes.slideWindow}>\n                <img className={classes.slideImage} src={happyPlace}></img>\n            </div>\n        </div>\n        \n    )\n}","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    footer: {\r\n        display: 'flex',\r\n        color: theme.palette.text.secondary,\r\n        padding: theme.spacing(3),\r\n        paddingLeft: '10%',\r\n        paddingRight: '10%',\r\n        justifyContent: 'center',\r\n        borderTop: 'solid',\r\n        borderColor: 'lightgrey',\r\n        position: \"relative\",\r\n        bottom: 0\r\n    }\r\n}));\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n    return(\r\n        <footer className={classes.footer}>\r\n            <Typography color='inherit' align='center'>\r\n                Lecshare brought to you by Vikelabs!<br/>\r\n                It is our goal to make learning more accessible to everyone by recording and transcribing lectures.<br/>\r\n                Developed by: Aomi Jokoji, Malcolm Seyd, Alex McRae, Bryce Edwards, Derek Lowlind, Goh Sato, Kevin Matthew, Malaki Vandas, and Ryley Woodland\r\n            </Typography>\r\n        </footer>     \r\n    )\r\n}","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport LectureText from './LectureText'\nimport LectureSlides from './LectureSlides'\nimport Footer from './Footer'\nimport axios from 'axios'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { string } from 'prop-types';\n\ninterface LectureProps {\n    courseName: string,\n    currentValue: number\n}\n\ninterface LectureState {\n    courseName: string,\n    textLoad: boolean,\n    wordArray: Array<WordStorageType>\n}\n\ntype WordStorageType = {\n    word: string,\n    startTimeSeconds: string,\n    endTimeSeconds: string,\n    endTimeNano: number,\n    startTimeNano: number\n}\n\nclass LectureContent extends React.Component<LectureProps, LectureState> {\n\n    //for now this is a local file but eventually we will call to api to get this file. (then store in cache to quickly grab if revisiting the same component)\n    //alternatively we have this call in the backend to create the html which is then sent back (but for demo we do not have)\n    componentDidMount() {\n       axios.get('vikelabs_test1.json').then(response => {\n           let bodyArray: WordStorageType[] = []\n\n           for(var key in response.data) {\n               let section = response.data[key].alternatives[0]\n               for(var key in section.words) {\n                   let wordStorage: WordStorageType = {\n                       word: section.words[key].word,\n                       startTimeSeconds: section.words[key].startTime.seconds,\n                       endTimeSeconds: section.words[key].endTime.seconds,\n                       endTimeNano: section.words[key].endTime.nanos,\n                       startTimeNano: section.words[key].endTime.nanos\n                   }       \n                   bodyArray.push(wordStorage)\n               }\n                \n           }\n           this.setState({wordArray: bodyArray})\n           this.setState({textLoad: true})\n       })\n    }\n\n    constructor(props: LectureProps) {\n        super(props)\n        this.state = {\n            courseName: this.props.courseName,\n            textLoad: false,\n            wordArray: []\n        }\n    }\n\n    render() {\n\n        let lectureBody: any;\n\n        if (this.state.textLoad) {\n            lectureBody = <LectureText words={this.state.wordArray} currentValue={this.props.currentValue}/>\n        } else {\n            lectureBody = <CircularProgress />\n        }\n        console.log(this.props.currentValue)\n        return(\n            <div>\n                <LectureSlides/>\n                {lectureBody}\n                <Footer/>\n            </div>     \n        )\n    }\n    \n}\n\nexport default LectureContent;","import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Container, Button } from '@material-ui/core';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {Howl, Howler} from 'howler';\r\n\r\ninterface AudioPlayerProps {\r\n    value?: number\r\n    source: string\r\n    returnMethod: (value: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    playbackButton: {\r\n        color: \"white\"\r\n    },\r\n}));\r\n\r\nfunction initializeHowler(props: AudioPlayerProps){\r\n    return new Howl({\r\n        src: props.source,\r\n        preload: true\r\n    })\r\n}\r\n\r\nexport function formatTime(seconds: number) {\r\n    const h = Math.floor(seconds / 3600);\r\n    const m = Math.floor((seconds % 3600) / 60);\r\n    const s = Math.floor(seconds % 60);\r\n    return [\r\n        h,\r\n        m > 9 ? m : (h ? '0' + m : m || '0'),\r\n        s > 9 ? s : '0' + s,\r\n    ].filter(a => a).join(':');\r\n}\r\n  \r\nexport default function LectureAudioPlayer(props: AudioPlayerProps) {\r\n    const classes = useStyles();\r\n    const [marks, setMarks] = React.useState([{value: 0, label: '',}])\r\n    const [howler, setHowler] = React.useState(initializeHowler(props));\r\n    const [duration, setDuration] = React.useState(100);\r\n    const [playing, setPlaying] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [howlerTime, setHowlerTime] = React.useState(0)\r\n    \r\n    React.useEffect(() => {\r\n        return () => {\r\n            // howler.off()\r\n            howler.stop();\r\n            howler.unload();    \r\n            // setHowler(null);\r\n        }\r\n    },[])\r\n\r\n    React.useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (howler.state()=='loaded') {\r\n                const time = getCurrentTime()\r\n                setHowlerTime(time)\r\n                setLabels(time)\r\n                props.returnMethod(time)\r\n            }\r\n        }, 5000);\r\n        return () => clearInterval(interval);\r\n    }, [])\r\n\r\n    const getCurrentTime = () => {\r\n        return Math.round(howler.seek() as number)\r\n    }\r\n\r\n    const handleValue = (e: any, value: any) => {\r\n        if (value as number) {\r\n            setValue(value as number);\r\n            setLabels(getCurrentTime())\r\n        }\r\n    }\r\n\r\n    const setLabels = (time: number) => {\r\n        setMarks([\r\n            {\r\n                value: 0,\r\n                label: formatTime(time)\r\n            },\r\n            {\r\n                value: howler.duration(),\r\n                label: formatTime(howler.duration())\r\n            }\r\n        ])\r\n    }\r\n    \r\n    const handleValueCommit = (e: any, value: any) => {\r\n        if(value as number){\r\n            howler.seek(value as number);\r\n            if(!playing){\r\n                howler.play();\r\n                setPlaying(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handlePlaying = () => {\r\n        setDuration(howler.duration() as number);\r\n        const time = getCurrentTime()\r\n        if(playing){\r\n            const i = howler.pause();\r\n            setHowlerTime(time)\r\n            setPlaying(false);\r\n        } else {\r\n            howler.play();\r\n            setHowlerTime(time)\r\n            setPlaying(true);\r\n        }\r\n        \r\n        setLabels(time)\r\n    }\r\n\r\n    howler.on('load', () => {\r\n        setMarks([\r\n            {\r\n                value: 0,\r\n                label: '0:00'\r\n            },\r\n            {\r\n                value: duration,\r\n                label: formatTime(howler.duration())\r\n            }\r\n        ]);\r\n        howler.volume(0.5);\r\n    })\r\n\r\n    howler.on('end', () => {\r\n        setPlaying(false);\r\n        setValue(0);\r\n    })\r\n\r\n    return (\r\n        <Container>\r\n            <Button onClick={handlePlaying} disabled={howler.state() != \"loaded\"} >\r\n                {\r\n                    playing ? <PauseIcon className={classes.playbackButton} /> : <PlayArrowIcon className={classes.playbackButton} />\r\n                }\r\n            </Button>\r\n            \r\n            \r\n            { howler.state() === \"loading\" ? <LinearProgress color=\"secondary\" /> : <Slider \r\n                value={getCurrentTime()} \r\n                onChange={handleValue}\r\n                onChangeCommitted={handleValueCommit}\r\n                style={{color: 'white'}} \r\n                aria-labelledby=\"continuous-slider\"\r\n                marks={marks}\r\n                max={duration}\r\n                // disable the playback slider\r\n                disabled={howler.state() != \"loaded\"}\r\n                key={props.source}\r\n            />\r\n                \r\n                // <CircularProgress style={{color: \"white\"}} />\r\n            }\r\n            <Typography>{props.source}</Typography>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport LectureContent from './LectureContent'\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport LectureAudioPlayer from './LectureAudioPlayer';\n\nconst drawerWidth = 200;\n\ninterface DrawerProps {\n  courseName: string,\n  container?: Element\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}));\n\nexport default function TopBarDrawer(props: DrawerProps) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [currentValue, setCurrentValue] = React.useState(0);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const changeValue = (value: number) => {\n    setCurrentValue(value)\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {['Lecture 1', 'Lecture 2'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{<MenuBookIcon/>}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n    </div>\n  );\n  \n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Lecshare \n          </Typography>\n         <LectureAudioPlayer source={process.env.PUBLIC_URL + 'vikelabs_test1.ogg'} returnMethod={changeValue}/>\n        </Toolbar>\n        \n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n            <LectureContent courseName={props.courseName} currentValue={currentValue}/>\n      </main>\n    </div>\n  ); \n}\n","import React from 'react'\nimport TopBarDrawer from \"./TopBarDrawer\";\nimport Footer from \"./Footer\"\n\ninterface MainState {\n    courseName:string\n}\n\nclass MainContainer extends React.Component<{}, MainState> {\n    \n    constructor(props: any) {\n        super(props);\n        this.state = {\n            courseName: 'SENG310'\n        }\n    }\n\n    ///method for handling course change (get new data, audio, text, lectures etc.)\n    changeCourse = () => {\n        \n    }\n    ///method for handling change in lecture, changing data but not available lectures or course\n    changeLecture = () => {\n    \n    }\n    \n    render() {\n        return(\n            <div className='main'>\n                <TopBarDrawer courseName={this.state.courseName}/>\n            </div>\n        )\n    }\n}\n\nexport default MainContainer;","import React from 'react';\nimport './App.css';\nimport MainContainer from './components/MainContainer'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}