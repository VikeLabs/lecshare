{"version":3,"sources":["images/protoslideimage.jpg","components/LectureText.tsx","components/LectureSlides.tsx","components/Footer.tsx","components/LectureContent.tsx","components/LectureAudioPlayer.tsx","components/TopBarDrawer.tsx","components/MainContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","transcriptionText","fontSize","fontFamily","margin","textAlign","maxWidth","transcriptionWord","display","lineHeight","padding","marginLeft","marginRight","marginTop","marginBottom","transcriptionWordHighlighted","backgroundColor","borderRadius","transition","LectureContent","props","classes","bodyText","words","map","entry","index","startTimeSeconds","endTimeSeconds","currentSeconds","currentNanos","startTimeNano","endTimeNano","key","starttimeseconds","starttimenano","endtimeseconds","endtimenano","className","word","slideWindow","height","slideImage","maxHeight","slideContainer","src","happyPlace","footer","color","palette","text","secondary","spacing","paddingLeft","paddingRight","justifyContent","borderTop","borderColor","position","bottom","Footer","Typography","align","state","courseName","textLoad","wordArray","axios","get","then","response","startTimeNanosEntry","bodyArray","data","section","alternatives","startTime","nanos","wordStorage","seconds","endTime","push","setState","lectureBody","this","CircularProgress","React","Component","playbackButton","formatTime","h","Math","floor","m","s","filter","a","join","LectureAudioPlayer","useState","value","label","marks","setMarks","Howl","source","preload","initializeHowler","howler","duration","setDuration","playing","setPlaying","setValue","isSliding","setIsSliding","requestRef","useRef","useEffect","current","requestAnimationFrame","animate","cancelAnimationFrame","stop","unload","seekSeconds","time","seek","onChange","decimal","round","seekNanos","setLabels","on","volume","Container","Button","onClick","pause","play","disabled","LinearProgress","Slider","e","onChangeCommitted","style","aria-labelledby","max","root","drawer","breakpoints","up","width","flexShrink","appBar","menuButton","toolbar","mixins","drawerPaper","content","flexGrow","TopBarDrawer","container","useTheme","mobileOpen","setMobileOpen","currentValue","setCurrentValue","setCurrentNanos","handleDrawerToggle","Divider","List","ListItem","button","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","MainContainer","changeCourse","changeLecture","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d4a216a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/protoslideimage.61347656.jpg\";","import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { inheritLeadingComments } from '@babel/types';\r\nimport { lineHeight, textAlign } from '@material-ui/system';\r\nimport { workerData } from 'worker_threads';\r\n\r\n//TODO conditional font size like Medium\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    transcriptionText: {\r\n        fontSize: 21,\r\n        fontFamily: 'Roboto Serif, Noto Serif, Times New Roman, serif',\r\n        margin: 'auto',\r\n        textAlign: 'left',\r\n        maxWidth: '40em'\r\n    },\r\n    transcriptionWord: {\r\n        display: 'inline-block',\r\n        lineHeight: '17px',\r\n        // marginLeft: '5px',\r\n        // marginTop: '10px',\\\r\n\r\n        // Padding is highlighted, so it should be uniform on all sides.\r\n        padding: '5px',\r\n        marginLeft: '-5px',\r\n        marginRight: '-5px',\r\n        // Margins make up for extra space\r\n        marginTop: '5px',\r\n        marginBottom: '5px',\r\n    },\r\n    transcriptionWordHighlighted: {\r\n        display: 'inline-block',\r\n        lineHeight: '17px',\r\n        // marginLeft: '5px',\r\n        // marginTop: '10px',\r\n        \r\n        // Padding is highlighted, so it should be uniform on all sides.\r\n        padding: '5px',\r\n        marginLeft: '-5px',\r\n        marginRight: '-5px',\r\n        // Margins make up for extra space\r\n        marginTop: '5px',\r\n        marginBottom: '5px',\r\n\r\n        backgroundColor: '#ffbed0',\r\n        borderRadius: '10px',\r\n        transition: 'backgroundColor 100ms linear'\r\n    }\r\n}));\r\n\r\ntype WordStorageType = {\r\n    word: string,\r\n    startTimeSeconds: string,\r\n    endTimeSeconds: string,\r\n    endTimeNano: number,\r\n    startTimeNano: number\r\n}\r\n\r\ninterface LectureTextProps {\r\n    words: Array<WordStorageType>,\r\n    currentSeconds: number\r\n    currentNanos: number\r\n}\r\n\r\nexport default function LectureContent(props: LectureTextProps) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    const bodyText = props.words.map((entry, index) => {\r\n            if (+entry.startTimeSeconds==+entry.endTimeSeconds && props.currentSeconds == +entry.startTimeSeconds && props.currentNanos >= +entry.startTimeNano && props.currentNanos <= +entry.endTimeNano) {\r\n                return(\r\n                    // @ts-ignore\r\n                    <span key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                        <div className={classes.transcriptionWordHighlighted}>{entry.word}</div>\r\n                        &nbsp;\r\n                    </span>                 \r\n                )\r\n            } else if (+entry.startTimeSeconds + 1 == +entry.endTimeSeconds) {\r\n                if ((props.currentSeconds==+entry.startTimeSeconds && props.currentNanos >= +entry.startTimeNano) || (props.currentSeconds==+entry.endTimeSeconds && props.currentNanos <= +entry.endTimeNano)) {\r\n                    return(\r\n                        // @ts-ignore\r\n                        <span key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                            <div className={classes.transcriptionWordHighlighted}>{entry.word}</div>\r\n                            &nbsp;\r\n                        </span>                 \r\n                    )\r\n                } else {\r\n                    return(\r\n                        // @ts-ignore\r\n                        <span className={classes.transcriptionWord} key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                            {entry.word}&nbsp;\r\n                        </span>\r\n                    )\r\n                }\r\n            } else {  \r\n                return(\r\n                    // @ts-ignore\r\n                    <span className={classes.transcriptionWord} key={index} starttimeseconds={entry.startTimeSeconds} starttimenano={entry.startTimeNano} endtimeseconds={entry.endTimeSeconds} endtimenano={entry.endTimeNano}>\r\n                        {entry.word}&nbsp;\r\n                    </span>\r\n                )\r\n            }\r\n        }\r\n    )\r\n    \r\n    return(\r\n        <div className={classes.transcriptionText}><p>{bodyText}</p></div>\r\n    )\r\n}","import React from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport happyPlace from '../images/protoslideimage.jpg'\n\nconst useStyles = makeStyles(theme => ({\n    slideWindow: {\n        height: '500px',\n        marginLeft: '20%',\n        marginRight: '20%',\n        backgroundColor: 'lightblue'\n    },\n    slideImage: {\n        maxHeight: '100%',\n        maxWidth: '100%'\n    },\n    slideContainer: {\n        backgroundColor: 'lightgrey'\n    }\n}));\n\nexport default function LectureContent() {\n    const classes = useStyles();\n    return(\n        <div className={classes.slideContainer}>\n            <div className={classes.slideWindow}>\n                <img className={classes.slideImage} src={happyPlace}></img>\n            </div>\n        </div>\n        \n    )\n}","import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    footer: {\r\n        display: 'flex',\r\n        color: theme.palette.text.secondary,\r\n        padding: theme.spacing(3),\r\n        paddingLeft: '10%',\r\n        paddingRight: '10%',\r\n        justifyContent: 'center',\r\n        borderTop: 'solid',\r\n        borderColor: 'lightgrey',\r\n        position: \"relative\",\r\n        bottom: 0\r\n    }\r\n}));\r\n\r\nexport default function Footer() {\r\n    const classes = useStyles();\r\n    return(\r\n        <footer className={classes.footer}>\r\n            <Typography color='inherit' align='center'>\r\n                Lecshare brought to you by Vikelabs!<br/>\r\n                It is our goal to make learning more accessible to everyone by recording and transcribing lectures.<br/>\r\n                Developed by: Aomi Jokoji, Malcolm Seyd, Alex McRae, Bryce Edwards, Derek Lowlind, Goh Sato, Kevin Matthew, Malaki Vandas, and Ryley Woodland\r\n            </Typography>\r\n        </footer>     \r\n    )\r\n}","import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport LectureText from './LectureText'\r\nimport LectureSlides from './LectureSlides'\r\nimport Footer from './Footer'\r\nimport axios from 'axios'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { string } from 'prop-types';\r\n\r\ninterface LectureProps {\r\n    courseName: string,\r\n    currentSeconds: number\r\n    currentNanos: number\r\n}\r\n\r\ninterface LectureState {\r\n    courseName: string,\r\n    textLoad: boolean,\r\n    wordArray: Array<WordStorageType>\r\n}\r\n\r\ntype WordStorageType = {\r\n    word: string,\r\n    startTimeSeconds: string,\r\n    endTimeSeconds: string,\r\n    endTimeNano: number,\r\n    startTimeNano: number\r\n}\r\n\r\nclass LectureContent extends React.Component<LectureProps, LectureState> {\r\n\r\n    //for now this is a local file but eventually we will call to api to get this file. (then store in cache to quickly grab if revisiting the same component)\r\n    //alternatively we have this call in the backend to create the html which is then sent back (but for demo we do not have)\r\n    componentDidMount() {\r\n        axios.get('vikelabs_test1.json').then(response => {\r\n            let bodyArray: WordStorageType[] = []\r\n            var startTimeEntry;\r\n            var startTimeNanosEntry;\r\n            var endTimeEntry;\r\n            var endTimeNanosEntry; \r\n            for (var key in response.data) {\r\n                let section = response.data[key].alternatives[0]\r\n                for (var key in section.words) {\r\n                    if(!(\"nanos\" in section.words[key].startTime)) {\r\n                        startTimeNanosEntry = 0\r\n                    } else {\r\n                        startTimeNanosEntry =  section.words[key].startTime.nanos\r\n                    }\r\n                    let wordStorage: WordStorageType = {\r\n                        word: section.words[key].word,\r\n                        startTimeSeconds: section.words[key].startTime.seconds,\r\n                        endTimeSeconds: section.words[key].endTime.seconds,\r\n                        endTimeNano: section.words[key].endTime.nanos,\r\n                        startTimeNano: startTimeNanosEntry\r\n                    }       \r\n                    bodyArray.push(wordStorage)\r\n                }\r\n                    \r\n            }\r\n            this.setState({wordArray: bodyArray})\r\n            this.setState({textLoad: true})\r\n        })\r\n    }\r\n\r\n    constructor(props: LectureProps) {\r\n        super(props)\r\n        this.state = {\r\n            courseName: this.props.courseName,\r\n            textLoad: false,\r\n            wordArray: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let lectureBody: any;\r\n\r\n        if (this.state.textLoad) {\r\n            lectureBody = <LectureText words={this.state.wordArray} currentSeconds={this.props.currentSeconds} currentNanos={this.props.currentNanos}/>\r\n        } else {\r\n            lectureBody = <CircularProgress />\r\n        }\r\n        return(\r\n            <div>\r\n                <LectureSlides/>\r\n                {lectureBody}\r\n                <Footer/>\r\n            </div>     \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default LectureContent;","import React from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Container, Button } from '@material-ui/core';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {Howl, Howler} from 'howler';\r\n\r\ninterface AudioPlayerProps {\r\n    value?: number\r\n    source: string\r\n    onChange?: (value: number, nanos: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    playbackButton: {\r\n        color: \"white\"\r\n    },\r\n}));\r\n\r\nfunction initializeHowler(props: AudioPlayerProps){\r\n    return new Howl({\r\n        src: props.source,\r\n        preload: true\r\n    })\r\n}\r\n\r\nexport function formatTime(seconds: number) {\r\n    const h = Math.floor(seconds / 3600);\r\n    const m = Math.floor((seconds % 3600) / 60);\r\n    const s = Math.floor(seconds % 60);\r\n    return [\r\n        h,\r\n        m > 9 ? m : (h ? '0' + m : m || '0'),\r\n        s > 9 ? s : '0' + s,\r\n    ].filter(a => a).join(':');\r\n}\r\n  \r\nexport default function LectureAudioPlayer(props: AudioPlayerProps) {\r\n    const classes = useStyles();\r\n    const [marks, setMarks] = React.useState([{value: 0, label: '',}])\r\n    const [howler, setHowler] = React.useState(initializeHowler(props));\r\n    const [duration, setDuration] = React.useState(100);\r\n    const [playing, setPlaying] = React.useState(false);\r\n    const [value, setValue] = React.useState(0);\r\n    const [isSliding, setIsSliding] = React.useState(false);\r\n\r\n    const requestRef: any = React.useRef();\r\n  \r\n    React.useEffect(() => {\r\n        // runs on component mount\r\n        requestRef.current = requestAnimationFrame(animate);\r\n        return () => {\r\n            // dismount\r\n            cancelAnimationFrame(requestRef.current);\r\n            // unload Howler\r\n            howler.stop();\r\n            howler.unload();\r\n        }\r\n    },[])\r\n\r\n    const seekSeconds = (time?: number) => {\r\n        return Math.floor(howler.seek() as number);\r\n    }\r\n\r\n    const seekNanos = (time?: number) => {\r\n        var initial = (howler.seek() as number) \r\n        var decimal = (initial % 1) * 10\r\n        var rounded = Math.round(decimal)\r\n        return rounded * 100000000\r\n    }\r\n\r\n    const animate = (time: any) => {\r\n        // The 'state' will always be the initial value here\r\n        if(howler.state() == \"loaded\"){\r\n            if(props.onChange){\r\n                props.onChange(seekSeconds(), seekNanos());\r\n            }\r\n            setValue(seekSeconds());\r\n            setLabels(seekSeconds());\r\n        }\r\n        requestRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    const setLabels = (time: number) => {\r\n        setMarks([\r\n            {\r\n                value: 0,\r\n                label: formatTime(time)\r\n            },\r\n            {\r\n                value: howler.duration(),\r\n                label: formatTime(duration)\r\n            }\r\n        ])\r\n    }\r\n\r\n    const handleValue = (e: any, value: any) => {\r\n        if(!isSliding){\r\n            setIsSliding(true);\r\n            cancelAnimationFrame(requestRef.current);\r\n        } \r\n        \r\n        setValue(value as number);\r\n        if(props.onChange){\r\n            props.onChange(value as number, 0);\r\n        }\r\n        setLabels(value);\r\n    }\r\n\r\n    const handleValueCommit = (e: any, value: any) => {\r\n        if(value as number){\r\n            howler.seek(value as number);\r\n            if(!playing){\r\n                howler.play();\r\n                setPlaying(true);\r\n            }\r\n        }\r\n        setIsSliding(false);\r\n        requestRef.current = requestAnimationFrame(animate);\r\n    }\r\n\r\n    const handlePlaying = () => {\r\n        const time = seekSeconds();\r\n        if(playing){\r\n            howler.pause();\r\n            setPlaying(false);\r\n        } else {\r\n            howler.play();\r\n            setPlaying(true);\r\n        }\r\n        \r\n        setLabels(time)\r\n    }\r\n\r\n    // Howler event when audio is loaded.\r\n    howler.on('load', () => {\r\n        setDuration(howler.duration() as number);\r\n        setLabels(0);\r\n        howler.volume(0.5);\r\n    })\r\n\r\n    //  Howler event when audio has finished playback.\r\n    howler.on('end', () => {\r\n        setPlaying(false);\r\n        setValue(0);\r\n    })\r\n\r\n    return (\r\n        <Container>\r\n            <Button onClick={handlePlaying} disabled={howler.state() != \"loaded\"} >\r\n                {\r\n                    playing ? <PauseIcon className={classes.playbackButton} /> : <PlayArrowIcon className={classes.playbackButton} />\r\n                }\r\n            </Button>\r\n            \r\n            { howler.state() === \"loading\" ? <LinearProgress color=\"secondary\" /> : <Slider \r\n                value={value} \r\n                onChange={handleValue}\r\n                onChangeCommitted={handleValueCommit}\r\n                style={{color: 'white'}} \r\n                aria-labelledby=\"continuous-slider\"\r\n                marks={marks}\r\n                max={duration}\r\n                // disable the playback slider\r\n                disabled={howler.state() != \"loaded\"}\r\n                key={props.source}\r\n            />\r\n                \r\n                // <CircularProgress style={{color: \"white\"}} />\r\n            }\r\n            <Typography>{props.source}</Typography>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport LectureContent from './LectureContent'\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport LectureAudioPlayer from './LectureAudioPlayer';\r\n\r\nconst drawerWidth = 200;\r\n\r\ninterface DrawerProps {\r\n  courseName: string,\r\n  container?: Element\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function TopBarDrawer(props: DrawerProps) {\r\n  const { container } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n  const [currentValue, setCurrentValue] = React.useState(0);\r\n  const [currentNanos, setCurrentNanos] = React.useState(0);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const changeValue = (value: number, nanos: number) => {\r\n    setCurrentValue(value)\r\n    setCurrentNanos(nanos)\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {['Lecture 1', 'Lecture 2'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{<MenuBookIcon/>}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n    </div>\r\n  );\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Lecshare \r\n          </Typography>\r\n         <LectureAudioPlayer source={'vikelabs_test1.ogg'} onChange={changeValue}/>\r\n        </Toolbar>\r\n        \r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n            <LectureContent courseName={props.courseName} currentSeconds={currentValue} currentNanos={currentNanos}/>\r\n      </main>\r\n    </div>\r\n  ); \r\n}\r\n","import React from 'react'\nimport TopBarDrawer from \"./TopBarDrawer\";\nimport Footer from \"./Footer\"\n\ninterface MainState {\n    courseName:string\n}\n\nclass MainContainer extends React.Component<{}, MainState> {\n    \n    constructor(props: any) {\n        super(props);\n        this.state = {\n            courseName: 'SENG310'\n        }\n    }\n\n    ///method for handling course change (get new data, audio, text, lectures etc.)\n    changeCourse = () => {\n        \n    }\n    ///method for handling change in lecture, changing data but not available lectures or course\n    changeLecture = () => {\n    \n    }\n    \n    render() {\n        return(\n            <div className='main'>\n                <TopBarDrawer courseName={this.state.courseName}/>\n            </div>\n        )\n    }\n}\n\nexport default MainContainer;","import React from 'react';\nimport './App.css';\nimport MainContainer from './components/MainContainer'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}